<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伊成个人站-热衷于技术分享，源码分享的个人网站</title>
  
  <subtitle>伊成个人站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.devcheng.net/"/>
  <updated>2021-12-29T01:33:48.655Z</updated>
  <id>http://www.devcheng.net/</id>
  
  <author>
    <name>伊成</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于SpringBoot开发的新闻发布管理系统源码分享</title>
    <link href="http://www.devcheng.net/post/f563b3cc.html"/>
    <id>http://www.devcheng.net/post/f563b3cc.html</id>
    <published>2021-12-29T01:16:41.000Z</published>
    <updated>2021-12-29T01:33:48.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>本项目是基于Spring Boot 2.x 开发的，新闻发布管理系统分为前台和后台两个部分。本项目可以当作毕业设计，期末课程作业等，也可以当作学习、进阶Spring Boot 的资料。</p><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a><strong>功能描述</strong></h2><p>本项目前台系统主要是新闻数据展示，便于用户阅读对应的新闻，支持用户阅读新闻后留言和打赏的功能；后台新闻发布管理系统提供给管理员新增、编辑以及删除新闻等操作，同时支持新闻分类，新闻标签等功能操作。</p><h2 id="主要功能有："><a href="#主要功能有：" class="headerlink" title="主要功能有："></a><strong>主要功能有：</strong></h2><ul><li>新闻搜索</li><li>新闻留言</li><li>新闻打赏</li><li>管理员登录</li><li>新闻管理</li><li>分类管理</li><li>标签管理</li><li>管理员退出</li><li>…</li></ul><h2 id="开发环境（运行环境）"><a href="#开发环境（运行环境）" class="headerlink" title="开发环境（运行环境）"></a><strong>开发环境（运行环境）</strong></h2><ul><li>系统环境：Windows 10</li><li>开发工具：IntelliJ IDEA 2020.3</li><li>Java版本：JDK 1.8</li><li>Mysql版本：5.7</li><li>Maven版本：3.6.3</li></ul><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a><strong>项目技术栈</strong></h2><ul><li>Spring Boot 2.3.X.RELEASE</li><li>Spring Boot JPA</li><li>Maven 3.X</li><li>Mysql</li><li>thymeleaf</li><li>Semantic UI 2.4.2</li><li>Jquery</li><li>…</li></ul><h2 id="登录地址"><a href="#登录地址" class="headerlink" title="登录地址"></a><strong>登录地址</strong></h2><p>访问路径：<a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a></p><p>管理员登录路径：<a href="http://localhost:8082/admin" target="_blank" rel="noopener">http://localhost:8082/admin</a><br>管理员账号： admin<br>管理员密码： 123456</p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a><strong>项目截图</strong></h2><p><img src="/images/devcheng_net_new0001.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0002.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0003.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0004.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0005.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0006.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0007.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0008.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0009.png" alt="“伊成博客”"></p><h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a><strong>联系我们</strong></h2><p>如有需要源码可以通过QQ 搜索：792435323联系我！<br>请备注：新闻发布系统</p><h2 id="项目演示视频"><a href="#项目演示视频" class="headerlink" title="项目演示视频"></a><strong>项目演示视频</strong></h2><p>链接: <a href="https://pan.baidu.com/s/1VAnfIm4UnZ2gwZJvjWRTyQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1VAnfIm4UnZ2gwZJvjWRTyQ</a><br>提取码: gjk2</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><p>获取代码之后，使用IDEA导入本项目前，请确保你本地环境是已经含有代码所需要运行环境的条件了。</p><p>接着找到对应的sql文件，将其导入到你本地的数据库即可。</p><p>最后修改项目中配置文件中的数据库对应的信息，确认修改完毕，找到对应的NewsApplication直接运行吧！</p><h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a><strong>其它说明</strong></h2><p>白嫖怪请绕道！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本项目是基于Spring Boot 2.x 开发的，新闻发布管理系统分为前台和后台两个部分。本项目可以当作
      
    
    </summary>
    
      <category term="codeshare" scheme="http://www.devcheng.net/categories/codeshare/"/>
    
    
      <category term="新闻发布管理系统" scheme="http://www.devcheng.net/tags/%E6%96%B0%E9%97%BB%E5%8F%91%E5%B8%83%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="毕设" scheme="http://www.devcheng.net/tags/%E6%AF%95%E8%AE%BE/"/>
    
      <category term="springboot" scheme="http://www.devcheng.net/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringBoot开发的宠物管理系统源码分享</title>
    <link href="http://www.devcheng.net/post/eb48f8f9.html"/>
    <id>http://www.devcheng.net/post/eb48f8f9.html</id>
    <published>2021-12-16T11:48:47.000Z</published>
    <updated>2021-12-16T12:04:46.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>本项目是基于Spring Boot 2.x 开发的，宠物管理系统分为前台系统和后台数据管理系统，可以当作毕业设计，期末课程作业等，也可以当作学习、进阶Spring Boot 的资料。</p><h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a><strong>项目描述</strong></h2><p>本项目前台系统主要是数据展示，提供给用户领养宠物和购买宠物用品等功能；后台数据管理系统分为普调用户和管理员两种角色。管理员可以管理用户，宠物信息，商品信息，订单信息等。</p><h2 id="主要功能有："><a href="#主要功能有：" class="headerlink" title="主要功能有："></a><strong>主要功能有：</strong></h2><ul><li>数据分析</li><li>会员管理</li><li>宠物信息管理</li><li>管理员管理</li><li>商品管理</li><li>订单管理</li><li>登录&amp;注册功能</li><li>购物车功能</li><li>个人信息功能</li><li>宠物领养功能</li><li>…</li></ul><h2 id="开发环境（运行环境）"><a href="#开发环境（运行环境）" class="headerlink" title="开发环境（运行环境）"></a><strong>开发环境（运行环境）</strong></h2><p>系统环境：Windows 10</p><ul><li>开发工具：IntelliJ IDEA 2020.3</li><li>Java版本：JDK 1.8</li><li>Mysql版本：5.7</li><li>Maven版本：3.6.3</li></ul><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a><strong>项目技术栈</strong></h2><ul><li>Spring Boot 2.3.7.RELEASE</li><li>Mybatis</li><li>Maven 3.X</li><li>Mysql</li><li>thymeleaf</li><li>Layui</li><li>Jquery</li><li>Echarts</li><li>…</li></ul><h2 id="登录地址"><a href="#登录地址" class="headerlink" title="登录地址"></a><strong>登录地址</strong></h2><p><a href="http://localhost:8081/index" target="_blank" rel="noopener">http://localhost:8081/index</a><br>管理员账号： <a href="mailto:admin@pet.com" target="_blank" rel="noopener">admin@pet.com</a><br>管理员密码： 1234qwer</p><p>其它用户账号密码默认均为：1234qwer</p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a><strong>项目截图</strong></h2><p><img src="/images/devcheng_net_cwsys_001.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_002.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_003.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_004.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_005.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_006.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_007.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_008.png" alt="“伊成博客”"></p><h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a><strong>联系我们</strong></h2><p>如有需要源码可以通过QQ 搜索：792435323联系我！<br>请备注：宠物管理系统</p><h2 id="项目演示视频"><a href="#项目演示视频" class="headerlink" title="项目演示视频"></a><strong>项目演示视频</strong></h2><p>链接: <a href="https://pan.baidu.com/s/1pvYZIQ3DmBqfXw13AhuhkA" target="_blank" rel="noopener">https://pan.baidu.com/s/1pvYZIQ3DmBqfXw13AhuhkA</a><br>提取码: gid8 </p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><p>获取代码之后，使用IDEA导入本项目前，请确保你本地环境是已经含有代码所需要运行环境的条件了。</p><p>接着找到对应的sql文件，将其导入到你本地的数据库即可。</p><p>最后修改项目中配置文件中的数据库对应的信息，确认修改完毕，找到对应的PetManagerApplication直接运行吧！</p><h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a><strong>其它说明</strong></h2><p>白嫖怪请绕道！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本项目是基于Spring Boot 2.x 开发的，宠物管理系统分为前台系统和后台数据管理系统，可以当作毕
      
    
    </summary>
    
      <category term="codeshare" scheme="http://www.devcheng.net/categories/codeshare/"/>
    
    
      <category term="SpringBoot" scheme="http://www.devcheng.net/tags/SpringBoot/"/>
    
      <category term="毕业设计" scheme="http://www.devcheng.net/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="宠物管理系统" scheme="http://www.devcheng.net/tags/%E5%AE%A0%E7%89%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="源码" scheme="http://www.devcheng.net/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之抽象工厂模式</title>
    <link href="http://www.devcheng.net/post/6f820280.html"/>
    <id>http://www.devcheng.net/post/6f820280.html</id>
    <published>2021-12-13T12:54:39.000Z</published>
    <updated>2021-12-13T13:01:38.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抽象工厂模式介绍"><a href="#抽象工厂模式介绍" class="headerlink" title="抽象工厂模式介绍"></a>抽象工厂模式介绍</h2><p>抽象工厂模式的定义：为创建一组相关或者互相依赖的对象提供一个接口，而无需指定它们对应的具体类。</p><p>具体可以这样理解，世界各地都有自己的水果园，我们将这些水果园抽象为一个水果园接口，在中国、英国和美国都有水果园，种植不同的水果，比如苹果、香蕉和梨等。这里将苹果进行抽象，所以，苹果又分为中国苹果，英国苹果和美国苹果。中国的水果园中有苹果、香蕉和梨等。抽象工厂中声明生产苹果、香蕉和梨等水果，那么具体的工厂相当于中国、英国和美国的水果园，各个水果园负责生产水果、香蕉和梨等。</p><h2 id="抽象工厂模式UML类图"><a href="#抽象工厂模式UML类图" class="headerlink" title="抽象工厂模式UML类图"></a>抽象工厂模式UML类图</h2><p><img src="/images/devcheng_net_sjms_cxgcms001.png" alt="“伊成博客”"></p><p>对比工厂方法模式，通过它们之间的类图对比，得知工厂方法模式中也是可以有多个具体工厂，也是可以有多个抽象产品，和多个具体工厂、具体产品类。</p><p>区别是在抽象工厂接口类中，能创建几个产品对象。抽象工厂模式的工厂能创建多个相关的产品对象，而工厂方法模式的工厂只创建一个产品对象。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>利用抽象工厂模式演示文中开头提及的世界各地都有自己的水果园的理解，下面请看代码。</p><p>1.创建Fruit接口、Apple抽象类、ChinaApple类等</p><p>Fruit(interface):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Apple抽象类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ChinaApple类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中国的苹果..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.创建抽象工厂、具体工厂</p><p>抽象工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化苹果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//实例化香蕉</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChinaApple();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChinaBanana();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建中国工厂</span></span><br><span class="line">        FruitFactory chinaFactory = <span class="keyword">new</span> ChinaFactory();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国苹果实例</span></span><br><span class="line">        Fruit apple = chinaFactory.getApple();</span><br><span class="line">        apple.get();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国香蕉实例</span></span><br><span class="line">        Fruit banana = chinaFactory.getBanana();</span><br><span class="line">        banana.get();        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建英国工厂</span></span><br><span class="line">        FruitFactory englandFactory = <span class="keyword">new</span> EnglandFactory();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国苹果实例</span></span><br><span class="line">        Fruit apple1 = englandFactory.getApple();</span><br><span class="line">        apple1.get();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国香蕉实例</span></span><br><span class="line">        Fruit banana2 = englandFactory.getBanana();</span><br><span class="line">        banana2.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果输出如下：<br><img src="/images/devcheng_net_sjms_cxgcms002.png" alt="“伊成博客”"></p><h2 id="抽象工厂模式的优缺点"><a href="#抽象工厂模式的优缺点" class="headerlink" title="抽象工厂模式的优缺点"></a>抽象工厂模式的优缺点</h2><p><strong>优点：</strong><br> 1.针对同一组产品创建新的生产线，只需实现那组产品的抽象工厂接口即可创建新的工厂类。</p><p><strong>缺点：</strong><br>抽象工厂模式的最大缺点就是产品族本身的扩展非常困难。如果在产品族中增加一个新的产品类型，则需要修改多个接口，并影响现已有的工厂类。</p><p>抽象工厂模式使用案例<br>1.在JDK中的应用，Collection接口<br><img src="/images/devcheng_net_sjms_cxgcms003.png" alt="“伊成博客”"></p><p>Collection就是一个抽象工厂，它提供了一个产品类的库，所有产品都以同样接口出现，从而使客户端不依赖于具体实现。工厂方法则是抽象工厂里面的其中一个产品类，并且把这个方法的实例化放入具体的实现类中  。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>工厂模式有三种：简单工厂模式，工厂方法模式，抽象工厂模式。<br>三种工厂模式个人感觉最大的区别就是，每种模式抽象的层级不一样，抽象的程度不一样。<br>不存在那种设计模式比较好，存在即合理。特定场景使用符合的设计模式才是正确的选择。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;抽象工厂模式介绍&quot;&gt;&lt;a href=&quot;#抽象工厂模式介绍&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式介绍&quot;&gt;&lt;/a&gt;抽象工厂模式介绍&lt;/h2&gt;&lt;p&gt;抽象工厂模式的定义：为创建一组相关或者互相依赖的对象提供一个接口，而无需指定它们对应的具体类
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="http://www.devcheng.net/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之工厂方法模式</title>
    <link href="http://www.devcheng.net/post/bca6e87b.html"/>
    <id>http://www.devcheng.net/post/bca6e87b.html</id>
    <published>2021-12-12T06:42:49.000Z</published>
    <updated>2021-12-12T06:49:29.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂方法模式介绍"><a href="#工厂方法模式介绍" class="headerlink" title="工厂方法模式介绍"></a>工厂方法模式介绍</h2><p>定义了一个创建对象的抽象方法，由子类决定要实例化的类，工厂方法模式将对象的实例化推迟到子类。</p><p>介绍工厂方法模式之前，整个工厂方法模式分为：<strong> 简单工厂模式，工厂方法模式，抽象工厂模式</strong>三种。</p><p><strong> 简单工厂模式 </strong>的创建意图就是，把对类的创建初始化全都交给一个工厂来执行，而用户不需要去关心创建的过程是什么样的，只用告诉工厂我想要什么就行了。</p><p>而这种方法的缺点也很明显，违背了设计模式的<strong>开闭原则</strong>，因为如果你要增加工厂可以初始化的类的时候，你必须对工厂进行改建。</p><h2 id="工厂方法模式UML类图"><a href="#工厂方法模式UML类图" class="headerlink" title="工厂方法模式UML类图"></a>工厂方法模式UML类图</h2><p><img src="/images/devcheng_net_gcffms_001.png" alt="“伊成博客”"></p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>ConcreteCreator： 抽象工厂角色，担任这个角色是工厂方法模式的核心，它是与应用程序无关的。任何在模式中创建对象的工厂类必须实现这个接口。</p><p>Creator： 具体工厂角色，担任这个角色的是实现了抽象工厂接口的具体Java类，具体工厂角色含有与应用密切相关的逻辑，并且受到应用程序的调用以创建产品对象。</p><p>ConcreteProduct： 抽象产品角色，工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</p><p>Product： 具体产品角色，这个角色实现了抽象产品角色所申明的接口。工厂方法模式所创建的每一个对象都是某个具体产品角色的实例。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>一个厨师（工厂类）负责所有的烤披萨任务，太累了。于是招了两个厨师分别负责烤披萨和切披萨，之前的厨师升级为厨师长（抽象工厂类），负责教那两位厨师（具体工厂类）烤披萨，自己则不用亲自动手烤披萨了。</p><p>下面是抽象产品的角色Pizza的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体角色CheesePizza的源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体角色GreekPizza的源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象工厂角色PizzaFactory的代码，这个角色是使用一个Java接口实现，它声明了一个工厂方法，要求所有的具体工厂角色实现这个工厂方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是具体工厂角色CheesePizzaFactory的代码，这个角色实现了抽象工厂角色PizzaFactory所声明的工厂方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizzaFactory</span> <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体工厂角色GreekPizzaFactory的代码，这个角色实现了抽象工厂角色PizzaFactory所声明的工厂方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizzaFactory</span> <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreekPizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端角色的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizaa</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建CheesePizzaFactory--具体工厂类</span></span><br><span class="line">        <span class="comment">//可以通过反射和配置文件来获取和存储具体工厂类的类名，更换新的具体工厂时无须修改源代码，系统扩展更为方便</span></span><br><span class="line">        PizzaFactory factory = <span class="keyword">new</span> CheesePizzaFactory();</span><br><span class="line">        Pizza pizza = factory.createPizza();</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="comment">//创建GreekPizzaFactory()--具体工厂类</span></span><br><span class="line">        pizza = factory.createPizza();</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">准备CheesePizza</span><br><span class="line">正在烤CheesePizza</span><br><span class="line">正在切CheesePizza</span><br><span class="line">正在打包CheesePizza</span><br><span class="line">准备GreekPizza</span><br><span class="line">正在烤GreekPizza</span><br><span class="line">正在切GreekPizza</span><br><span class="line">正在打包GreekPizza</span><br></pre></td></tr></table></figure></p><h2 id="工厂方法模式的优缺点"><a href="#工厂方法模式的优缺点" class="headerlink" title="工厂方法模式的优缺点"></a>工厂方法模式的优缺点</h2><p><strong> 优点：</strong><br> 1.遵循开闭原则，新增产品类时只需要增加相应的工厂以及产品即可，不需要修改原有的代码。<br> 2.符合单一职责原则，每个工厂类只负责一种产品的创建<br> 3.使用非静态方法来创建产品，利于后续对产品的拓展，可拓展性增加</p><p><strong> 缺点：</strong><br>1.一个工厂只能创建一种产品<br>2.每次增加新的产品时都需要增加对应的工厂类，当产品越来越多的时候系统创建的工厂类就越多，越来越复杂，不利于后期维护。同时，类的创建和销毁可能会对系统造成一定的开销。</p><h2 id="工厂方法模式使用案例"><a href="#工厂方法模式使用案例" class="headerlink" title="工厂方法模式使用案例"></a>工厂方法模式使用案例</h2><p>1.JDK中体现：Collection.iterator方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Collection接口里面定义了许多方法就像size(),isEmpty(),iterator()等等这些方法可以认为是工厂里面的产品，Collection可以看作是一个总的抽象工厂。</p><p>它的一些实现这个接口的类，像ArrayList，LinkedHashSet等等可以看作一个个不同的品牌的工厂，而总的产品Iterator接口里面会定义产品所需功能的细节，然后在交给各个品牌不同的工厂来实现。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂方法模式介绍&quot;&gt;&lt;a href=&quot;#工厂方法模式介绍&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式介绍&quot;&gt;&lt;/a&gt;工厂方法模式介绍&lt;/h2&gt;&lt;p&gt;定义了一个创建对象的抽象方法，由子类决定要实例化的类，工厂方法模式将对象的实例化推迟到子类。
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂方法模式" scheme="http://www.devcheng.net/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之建造者模式</title>
    <link href="http://www.devcheng.net/post/cae13d29.html"/>
    <id>http://www.devcheng.net/post/cae13d29.html</id>
    <published>2021-12-06T11:56:18.000Z</published>
    <updated>2021-12-06T12:15:47.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建造者模式介绍"><a href="#建造者模式介绍" class="headerlink" title="建造者模式介绍"></a>建造者模式介绍</h2><p>建造者模式，顾名思义的就是类似建房子，有一个固定的流程。在大话设计模式中，有一个例子大概意思是同一道菜在中国的每一个地方都有不同的味道，而肯德基的鸡腿、汉堡在每一个城市都是一样的味道。我觉的这一个例子可以清楚的认识到建造者模式有一个固定的建造过程。建造者模式实现了依赖倒转原则，<strong>抽象不应该依赖细节，细节应该依赖与抽象。</strong></p><p>建造者模式的定义是：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。</p><h2 id="建造者模式UML类图"><a href="#建造者模式UML类图" class="headerlink" title="建造者模式UML类图"></a>建造者模式UML类图</h2><p><img src="/images/devcheng_net_jzzms_001.png" alt="“伊成博客”"></p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><strong>Builder：</strong> 抽象建造者角色。为创建一个产品对象的各个部件指定抽象接口。</p><p><strong>ConcreteBuilder：</strong>具体建造者角色。实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。</p><p><strong>Director：</strong>指挥者角色。该角色负责调用具体建造者按照顺序建造产品。只负责调度，真正执行的是具体建造者角色。</p><p><strong>Product：</strong>产品角色。该角色是建造的复杂对象，提供基本方法</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>假如现在要造两辆豪车，一辆是兰博基尼，一辆是法拉利。那怎么用代码实现造这两辆豪车呢？<br>首先看产品角色代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Production</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String part1;</span><br><span class="line">    <span class="keyword">private</span> String part2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart1</span><span class="params">(String part1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.part1 = part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart2</span><span class="params">(String part2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.part2 = part2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象建造者角色代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产品有多少个组件，就有多少个建造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回产品类 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 开始造兰博基尼：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderA</span> <span class="keyword">implements</span> <span class="title">IBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Production production = <span class="keyword">new</span> Production();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造兰博基尼的第一部分。"</span>);</span><br><span class="line">        production.setPart1(<span class="string">"This is part1 of Lamborghini"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造兰博基尼的第二部分。"</span>);</span><br><span class="line">        production.setPart2(<span class="string">"This is part2 of Lamborghini"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"兰博基尼已造好！"</span>);</span><br><span class="line">        <span class="keyword">return</span> production;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开始造法拉利：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderB</span> <span class="keyword">implements</span> <span class="title">IBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Production production = <span class="keyword">new</span> Production();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造法拉利的第一部分。"</span>);</span><br><span class="line">        production.setPart1(<span class="string">"This is part1 of Ferrari"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造法拉利的第二部分。"</span>);</span><br><span class="line">        production.setPart2(<span class="string">"This is part2 of Ferrari"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"法拉利已造好！"</span>);</span><br><span class="line">        <span class="keyword">return</span> production;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指挥者调度构建，返回对应产品。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(IBuilder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.buildPart1();</span><br><span class="line">        builder.buildPart2();</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用一下，查看输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 兰博基尼</span></span><br><span class="line">        IBuilder builderA = <span class="keyword">new</span> BuilderA();</span><br><span class="line">        Director directorA = <span class="keyword">new</span> Director(builderA);</span><br><span class="line">        directorA.construct();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 法拉利</span></span><br><span class="line">        IBuilder builderB = <span class="keyword">new</span> BuilderB();</span><br><span class="line">        Director directorB = <span class="keyword">new</span> Director(builderB);</span><br><span class="line">        directorB.construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">构造兰博基尼的第一部分。</span><br><span class="line">构造兰博基尼的第二部分。</span><br><span class="line">兰博基尼已造好！</span><br><span class="line"></span><br><span class="line">构造法拉利的第一部分。</span><br><span class="line">构造法拉利的第二部分。</span><br><span class="line">法拉利已造好！</span><br></pre></td></tr></table></figure></p><h2 id="建造者模式的优缺点"><a href="#建造者模式的优缺点" class="headerlink" title="建造者模式的优缺点"></a>建造者模式的优缺点</h2><p><strong> 优点：</strong><br>1.封装性好，创建和使用分离<br>2.扩展性好，建造类之间独立，一定程度上实现了解耦</p><p><strong> 缺点：</strong><br>1.产生多余的Builder对象<br>2.产品内部发生变化时，建造者都需要修改，成本较大</p><h2 id="建造者模式使用案例"><a href="#建造者模式使用案例" class="headerlink" title="建造者模式使用案例"></a>建造者模式使用案例</h2><h3 id="1-Spring框架中使用建造者模式"><a href="#1-Spring框架中使用建造者模式" class="headerlink" title="1.Spring框架中使用建造者模式"></a>1.Spring框架中使用建造者模式</h3><p>Spring中的UriComponents和UriComponentsBuilder</p><p>UriComponents基本方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UriComponents</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ENCODING = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="comment">// 用于分割uri的正则表达式，下面会说到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern NAMES_PATTERN = Pattern.compile(<span class="string">"\\&#123;([^/]+?)\\&#125;"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String scheme;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fragment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">UriComponents</span><span class="params">(String scheme, String fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scheme = scheme;</span><br><span class="line">        <span class="keyword">this</span>.fragment = fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个Components对应的getter方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的scheme.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getScheme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.scheme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的fragment.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的schemeSpecificPar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getSchemeSpecificPart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回userInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getUserInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的host</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getHost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getPath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的path部分的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;String&gt; <span class="title">getPathSegments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的query部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的query参数map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MultiValueMap&lt;String, String&gt; <span class="title">getQueryParams</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL的components用特定的编码规则编码并返回，默认为utf-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">encode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> encode(DEFAULT_ENCODING);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (UnsupportedEncodingException ex) &#123;</span><br><span class="line">            <span class="comment">// should not occur</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码的抽象方法，传入相应的编码规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> UriComponents <span class="title">encode</span><span class="params">(String encoding)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">expand</span><span class="params">(Map&lt;String, ?&gt; uriVariables)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(uriVariables, <span class="string">"'uriVariables' must not be null"</span>);</span><br><span class="line">        <span class="keyword">return</span> expandInternal(<span class="keyword">new</span> MapTemplateVariables(uriVariables));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值，输入为数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">expand</span><span class="params">(Object... uriVariableValues)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(uriVariableValues, <span class="string">"'uriVariableValues' must not be null"</span>);</span><br><span class="line">        <span class="keyword">return</span> expandInternal(<span class="keyword">new</span> VarArgsTemplateVariables(uriVariableValues));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值，输入为UriTemplateVariables</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">expand</span><span class="params">(UriTemplateVariables uriVariables)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(uriVariables, <span class="string">"'uriVariables' must not be null"</span>);</span><br><span class="line">        <span class="keyword">return</span> expandInternal(uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值的最终的实现方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> UriComponents <span class="title">expandInternal</span><span class="params">(UriTemplateVariables uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> UriComponents <span class="title">normalize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toUriString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URI格式的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> URI <span class="title">toUri</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toUriString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将这些Components的值赋给其builder类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">copyToUriComponentsBuilder</span><span class="params">(UriComponentsBuilder builder)</span></span>;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UriComponentsBuilder类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认构造方法，其中path的构造类为CompositePathComponentBuilder，它为UriComponentsBuilder的内部静态类，主要实现对url的path部分进行构造。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">UriComponentsBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.pathBuilder = <span class="keyword">new</span> CompositePathComponentBuilder();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建一个传入UriComponentsBuilder类的深拷贝对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">UriComponentsBuilder</span><span class="params">(UriComponentsBuilder other)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.scheme = other.scheme;</span><br><span class="line">       <span class="keyword">this</span>.ssp = other.ssp;</span><br><span class="line">       <span class="keyword">this</span>.userInfo = other.userInfo;</span><br><span class="line">       <span class="keyword">this</span>.host = other.host;</span><br><span class="line">       <span class="keyword">this</span>.port = other.port;</span><br><span class="line">       <span class="keyword">this</span>.pathBuilder = other.pathBuilder.cloneBuilder();</span><br><span class="line">       <span class="keyword">this</span>.queryParams.putAll(other.queryParams);</span><br><span class="line">       <span class="keyword">this</span>.fragment = other.fragment;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-JDK中使用建造者模式"><a href="#2-JDK中使用建造者模式" class="headerlink" title="2.JDK中使用建造者模式"></a>2.JDK中使用建造者模式</h3><p>JDK中的StringBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">long</span> lng)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(lng);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(f);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(d);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/devcheng_net_jzzms_002.png" alt="“伊成博客”"></p><p>由上图我们可以看出StringBuilder继承了AbstractStringBuilder，而AbstractStringBuilder实现了appendable。</p><p>StringBuilder：指挥者类，持有具体建造者的引用，由于StringBuilder继承了AbstractStringBuilder，这里StringBuilder通过super来作为具体建造者的引用。<br>AbstractStringBuilder：具体建造者，它实现了appendable接口的append(Character c)方法。<br>appendable：抽象建造者，定义了创建对象的接口。<br>StringBuilder的append(Character c)方法：</p><p>tips：<br>基本上看到源码中以 Builder 结尾的类，大多数都属于 建造者模式~</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建造者模式介绍&quot;&gt;&lt;a href=&quot;#建造者模式介绍&quot; class=&quot;headerlink&quot; title=&quot;建造者模式介绍&quot;&gt;&lt;/a&gt;建造者模式介绍&lt;/h2&gt;&lt;p&gt;建造者模式，顾名思义的就是类似建房子，有一个固定的流程。在大话设计模式中，有一个例子大概意思是同一道
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="建造者模式" scheme="http://www.devcheng.net/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之原型模式</title>
    <link href="http://www.devcheng.net/post/4365a411.html"/>
    <id>http://www.devcheng.net/post/4365a411.html</id>
    <published>2021-11-28T09:05:26.000Z</published>
    <updated>2021-11-28T09:16:32.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式的介绍"><a href="#原型模式的介绍" class="headerlink" title="原型模式的介绍"></a>原型模式的介绍</h2><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。</p><p>这种模式存在的应用场景在于，能够复制当前对象，实现对象数据的克隆。比如：如果一个对象的数据需要经过较高代价的数据库操作，采用原型模式能够较好的缓存当前对象，减少数据库的访问量。</p><h2 id="原型模式UML类图"><a href="#原型模式UML类图" class="headerlink" title="原型模式UML类图"></a>原型模式UML类图</h2><p><img src="/images/原型模式Prototype.png" alt="“伊成博客”"></p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>原型模式包含如下角色：<br><strong>Prototype：抽象原型类</strong><br><strong>ConcretePrototype：具体原型类</strong><br><strong>Client：客户类</strong></p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>在日本动漫《火影忍者》中鸣人有一个忍术叫影分身之术，使用查克拉制造出有实体的分身，它们可以和施术者一样行动战斗，具有独立于施术者本体的意识和一定的抗击打能力，解除后分身的记忆和经验会回到本体。</p><p>简言之，就是一个鸣人分身后变成了多个一模一样的鸣人，如同把一个鸣人复制出来了N个鸣人，其实这种场景就是我们所说的原型模式。</p><p><img src="/images/devcheng_net_yxms_002.png" alt="“伊成博客”"></p><h2 id="实例源码"><a href="#实例源码" class="headerlink" title="实例源码"></a>实例源码</h2><p> MingRen 原型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MingRen</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"鸣人"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">public</span> String skill = <span class="string">"影分身之术"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MingRen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MingRen&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", skill='"</span> + skill + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    MingRen mingRen = <span class="keyword">new</span> MingRen();</span><br><span class="line">    MingRen mingRen2 = (MingRen)mingRen.clone();</span><br><span class="line">    System.out.println(mingRen);</span><br><span class="line">    System.out.println(mingRen2);</span><br><span class="line">    System.out.println(mingRen == mingRen2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MingRen&#123;name=&apos;鸣人&apos;, age=12, skill=&apos;影分身之术&apos;&#125;</span><br><span class="line">MingRen&#123;name=&apos;鸣人&apos;, age=12, skill=&apos;影分身之术&apos;&#125;</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>由以上源码我们可以得知，核心就是类图中的原型类。原型类需要具备以下两个条件：<br>实现Cloneable接口。在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用clone方法。在java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出CloneNotSupportedException异常。<br>重写Object类中的clone方法。默认是浅拷贝。</p><p>浅拷贝和深拷贝的说明，就不展开聊了，可参考下文了解。<br>点击了解 <a href="https://www.cnblogs.com/gollong/p/9668699.html" target="_blank" rel="noopener">java对象的浅克隆和深克隆</a></p><h2 id="原型模式的优缺点"><a href="#原型模式的优缺点" class="headerlink" title="原型模式的优缺点"></a>原型模式的优缺点</h2><p><strong>优点：</strong><br> 1.快速创建复杂对象实例，同时也提高了效率。<br> 2.不用重新初始化对象，而是动态获得对象运行时的状态。<br> 3.如果原始对象发生变化（增加或减少字段）其它克隆对象也会发生相应变化，无需修改代码。</p><p><strong>缺点：</strong><br> 1.必须实现Cloneable接口。<br> 2.实现深克隆的时候可能需要比较复杂的代码。<br> 3.需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了 ocp 原则。</p><h2 id="原型模式使用案例"><a href="#原型模式使用案例" class="headerlink" title="原型模式使用案例"></a>原型模式使用案例</h2><p>1、Spring 中原型 bean 的创建，使用到了原型设计模式。<br><img src="/images/devcheng_net_yxms_003.png" alt="“伊成博客”"></p><p><strong>Tips：</strong><br>原型模式也叫克隆模式！</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型模式的介绍&quot;&gt;&lt;a href=&quot;#原型模式的介绍&quot; class=&quot;headerlink&quot; title=&quot;原型模式的介绍&quot;&gt;&lt;/a&gt;原型模式的介绍&lt;/h2&gt;&lt;p&gt;用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="http://www.devcheng.net/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之单例模式</title>
    <link href="http://www.devcheng.net/post/23a824cc.html"/>
    <id>http://www.devcheng.net/post/23a824cc.html</id>
    <published>2021-11-27T08:35:03.000Z</published>
    <updated>2021-11-27T08:54:30.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式的介绍"><a href="#单例模式的介绍" class="headerlink" title="单例模式的介绍"></a>单例模式的介绍</h2><p>单例模式的定义就是确保某一个类只有一个实例，并且提供一个全局访问点。<br>主要有三个特点：</p><ol><li>只有一个实例。</li><li>自我实例化。</li><li>提供全局访问点。</li></ol><p>当系统中只需要一个实例对象或者系统中只允许一个公共访问点，除了这个公共访问点外，不能通过其他访问点访问该实例时，就可以使用单例模式。</p><h2 id="单例模式UML类图"><a href="#单例模式UML类图" class="headerlink" title="单例模式UML类图"></a>单例模式UML类图</h2><p><img src="/images/devcheng_net_sjms_dl.png" alt="“伊成博客”"></p><h2 id="单例模式的八种方式"><a href="#单例模式的八种方式" class="headerlink" title="单例模式的八种方式"></a>单例模式的八种方式</h2><font color="red">饿汉式（静态常量）</font><br><font color="red">饿汉式（静态代码块）</font><br>懒汉式（线程不安全）<br>懒汉式（线程安全，同步方法）<br>懒汉式（线程安全，同步代码块）<br><font color="red">双重检查</font><br><font color="red">静态内部类</font><br><font color="red">枚举</font><p><strong>1、饿汉式（静态常量）【可用】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong>这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。<br><strong>缺点：</strong>在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</p><p>这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getlnstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到 lazy loading的效果。</p><p><strong>结论：</strong>这种单例模式可用，可能造成内存浪费。</p><p><strong>2、饿汉式（静态代码块）【可用】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p><p><strong>结论：</strong>这种单例模式可用，但可能造成内存浪费。</p><p><strong>3、懒汉式（线程不安全）【不可用】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong>起到了Lazy Loading的效果，但是只能在单线程下使用。<br><strong>缺点：</strong>在多线程下，一个线程进入if (singleton == null)判断语句块，还没来得及往下执行，另一个线程也通过这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p><p><strong>结论：</strong>在实际开发中，不要使用这种方式。</p><p><strong>4、懒汉式（线程安全，同步方法）【不推荐使用】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong>解决了线程不安全问题。<br><strong>缺点：</strong>效率太低了，每个线程想获得类的实例的时候，执行getInstance()方法都要进行同步。其实这个方法只执行一次实例化代码就可以了，后面的想获得类的实例，直接return就行了，方法进行同步效率太低。</p><p><strong>结论：</strong>在实际开发中，不推荐使用这种方式。</p><p><strong>5、懒汉式（线程安全，同步代码块）【不可用】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong>这种方式本意是想对第四种方式的改进，以为前面同步方法效率太低，改为同步产生实例化的代码块。<br><strong>缺点：</strong>这种同步不能起到线程同步的作用。和第三种方式遇到的情形一致，如果一个线程进入了if (singleton == null) 判断语句块，还未来的及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p><p><strong>结论：</strong>在实际开发中，不能使用这种方式。</p><p><strong>6、双重检查 【推荐使用】</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static volatile Singleton singleton;</span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if (singleton == null) &#123;</span><br><span class="line">                    singleton = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong>Double Check概念是多线程开发中常使用到的，如代码中所示，我们进行两次 if (singleton == null)检查，这样可以保证线程安全。实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)的时候，直接return实例化对象，也避免了反复进行方法同步。<br>线程安全，延迟加载，效率较高。</p><p><strong>结论：</strong>在实际开发中，推荐使用这种方式。</p><p><strong>7、静态内部类 【推荐使用】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。<br>静态内部类方式在singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载singletonInstance类，从而完成Singleton的实例化。<br>类的静态属性只会在第一次加载类的时候初始化，所以在这里，ⅣM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p><p><strong>优点：</strong>避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高。</p><p><strong>结论：</strong>在实际开发中，推荐使用。</p><p><strong>8、枚举 [推荐使用]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p><p><strong>结论：</strong>推荐使用。</p><h2 id="单例模式使用案例"><a href="#单例模式使用案例" class="headerlink" title="单例模式使用案例"></a>单例模式使用案例</h2><p><strong>1、Runtime类中使用了饿汉式单例模式。</strong>如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Don't let anyone else instantiate this class */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、Spring源码中 AbstractBeanFactory</strong> 的 getBean 里， getBean 的 doGetBean 方法调用 getSingleton 进行bean的创建。</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * Return the (raw) singleton object registered under the given name.</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   * &lt;p&gt;Checks already instantiated singletons and also allows for an early</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   * reference to a currently created singleton (resolving a circular reference).</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> beanName the name of the bean to look for</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> allowEarlyReference whether early references should be created or not</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the registered singleton object, or &#123;<span class="doctag">@code</span> null&#125; if none found</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="meta">@Nullable</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">     Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">     <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">         singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">         <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">            ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">               singletonObject = singletonFactory.getObject();</span><br><span class="line">               <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">               <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> singletonObject;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><p>从上面代码可以看到，spring依赖注入时，使用了 双重判断加锁 的单例模式。</p><p><strong>3、Spring aop中的GlobalAdvisorAdapterRegistry类</strong></p><p><img src="/images/devcheng_net_sjms_002.png" alt="“伊成博客”"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * Singleton to publish a shared DefaultAdvisorAdapterRegistry instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DefaultAdvisorAdapterRegistry</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalAdvisorAdapterRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">GlobalAdvisorAdapterRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Keep track of a single instance so we can return it to classes that request it.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> AdvisorAdapterRegistry instance = <span class="keyword">new</span> DefaultAdvisorAdapterRegistry();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the singleton &#123;<span class="doctag">@link</span> DefaultAdvisorAdapterRegistry&#125; instance.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AdvisorAdapterRegistry <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单例模式的介绍&quot;&gt;&lt;a href=&quot;#单例模式的介绍&quot; class=&quot;headerlink&quot; title=&quot;单例模式的介绍&quot;&gt;&lt;/a&gt;单例模式的介绍&lt;/h2&gt;&lt;p&gt;单例模式的定义就是确保某一个类只有一个实例，并且提供一个全局访问点。&lt;br&gt;主要有三个特点：&lt;/p&gt;
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="http://www.devcheng.net/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之UML类图学习笔记</title>
    <link href="http://www.devcheng.net/post/385bde4f.html"/>
    <id>http://www.devcheng.net/post/385bde4f.html</id>
    <published>2021-11-16T12:09:40.000Z</published>
    <updated>2021-11-16T12:25:01.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA之UML类图学习笔记"><a href="#JAVA之UML类图学习笔记" class="headerlink" title="JAVA之UML类图学习笔记"></a>JAVA之UML类图学习笔记</h2><p>学习设计模式必不可少需要了解熟悉各个模式的UML类图，为了了解每个设计模式之间各个类的关系和结构很有必要学习一下UML类图。</p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件蓝图的可视化建模语言，1997 年被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>统一建模语言能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。它的应用领域很宽，不仅适合于一般系统的开发，而且适合于并行与分布式系统的建模。</p><p>UML 从目标系统的不同角度出发，定义了<strong>用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图</strong>等9种图。</p><h3 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h3><h4 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h4><p>指具有相同属性、方法和关系的对象的抽象，它封装了数据和行为，是面向对象程序设计（OOP）的基础，具有封装性、继承性和多态性等三大特性。</p><p>在UML中，类使用包含类名、属性和操作且带有分隔线的矩形来表示。</p><p>(1) 类名（Name）是一个字符串，例如，School。</p><p>(2) 属性（Attribute）是指类的特性，即类的成员变量。UML 按以下格式表示：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[可见性]属性名:类型[=默认值]</span><br></pre></td></tr></table></figure><p>举个栗子： -name:String</p><p><strong>tips:</strong>  “可见性” 指的是该属性对类外的元素是否可见。</p><p>类图中表示可见性的符号如下：</p><table><thead><tr><th><strong>+</strong></th><th><strong>public</strong></th></tr></thead><tbody><tr><td><strong>-</strong></td><td><strong>private</strong></td></tr><tr><td>#</td><td><strong>protected</strong></td></tr><tr><td><strong>~</strong></td><td><strong>package</strong></td></tr></tbody></table><p><strong>(3) 操作（Operations）是类的任意一个实例对象都可以使用的行为，是类的成员方法。UML 按以下格式表示</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[可见性]名称(参数列表)[:返回类型]</span><br></pre></td></tr></table></figure><p><strong>举个栗子，类的表示参考下图：</strong></p><p><img src="/images/leitu_20211116103518.png" alt="“伊成博客”"></p><h4 id="接口-（interface）"><a href="#接口-（interface）" class="headerlink" title="接口 （interface）"></a>接口 （interface）</h4><p>接口是指对象行为的描述，一个类可有一个或多个接口。</p><p><img src="/images/leitu_20211116104822.png" alt="“伊成博客”"></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>类图（ClassDiagram）是用来显示系统中的类、接口、协作以及它们之间的静态结构和关系的一种静态模型。它主要用于描述软件系统的结构化设计，帮助人们简化对软件系统的理解，它是系统分析与设计阶段的重要产物，也是系统编码与测试的重要模型依据。</p><p><img src="/images/leitu_gx_001.jpg" alt="“伊成博客”"></p><h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><p>UML 中的类图有以下几种关系：</p><p><strong>依赖关系（<em>Dependency</em>）、关联关系（Association）、聚合关系（Aggregation）、组合关系（Composition）、泛化关系（Generalization）和实现关系 (Realization)</strong>。</p><p>其中泛化和实现的耦合度相等，它们是最强的。</p><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><p>依赖（Dependency）关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。图所示是人与手机的关系图，人通过手机的语音传送方法打电话。</p><p><img src="/images/leitu_gx_002.jpg" alt="“伊成博客”"></p><h5 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h5><p>关联（Association）关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。</p><p>在代码中通常将一个类的对象作为另一个类的成员变量来实现关联关系。图 5 所示是老师和学生的关系图，每个老师可以教多个学生，每个学生也可向多个老师学，他们是双向关联。</p><p><img src="/images/leitu_gx_003.jpg" alt="“伊成博客”"></p><h5 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h5><p>聚合（Aggregation）关系是关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。图所示是大学和教师的关系图。</p><p><img src="/images/leitu_gx_004.jpg" alt="“伊成博客”"></p><h5 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h5><p>组合（Composition）关系也是关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 contains-a 关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。图所示是头和嘴的关系图。</p><p><img src="/images/leitu_gx_005.jpg" alt="“伊成博客”"></p><h5 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h5><p>泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如图所示。</p><p><img src="/images/leitu_gx_006.jpg" alt="“伊成博客”"></p><h5 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h5><p>实现（Realization）关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图所示。</p><p><img src="/images/leitu_gx_007.jpg" alt="“伊成博客”"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>便于记忆，特此绘制一个表格记录类之间的关系。</p><table><thead><tr><th style="text-align:left">类关系</th><th>说明</th><th>代码表现</th><th>箭头及指向</th></tr></thead><tbody><tr><td style="text-align:left"><strong>依赖关系</strong></td><td>是一种使用的关系,尽量不使用双向的互相依赖</td><td>局部变量、方法的参数或者对静态方法的调用</td><td>带箭头的虚线，指向被使用者</td></tr><tr><td style="text-align:left"><strong>关联关系</strong></td><td>是一种拥有的关系,它使一个类知道另一个类的属性和方法</td><td>成员变量</td><td>带普通箭头的实心线，指向被拥有者</td></tr><tr><td style="text-align:left"><strong>聚合关系</strong></td><td>是整体与部分的关系</td><td>成员变量</td><td>带空心菱形的实心线，菱形指向整体</td></tr><tr><td style="text-align:left"><strong>组合关系</strong></td><td>是整体与部分的关系</td><td>成员变量</td><td>带实心菱形的实线，菱形指向整体</td></tr><tr><td style="text-align:left"><strong>泛化关系</strong></td><td>是一种继承关系,它指定了子类如何特化父类的所有特征和行为</td><td>——</td><td>带三角箭头的实线，箭头指向父类</td></tr><tr><td style="text-align:left"><strong>实现关系</strong></td><td>一种类与接口的关系，表示类是接口所有特征和行为的实现</td><td>——</td><td>带三角箭头的虚线，箭头指向接口</td></tr></tbody></table><p>各种关系的强弱顺序：</p><p><strong>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</strong></p><p>看完这些脑袋是不是嗡嗡的啊，少年，还有一个速记表格如下：</p><p><img src="/images/leitu_zj_20211116144939.png" alt="“伊成博客”"></p><p>看以上表格可快速看懂类和类之间的关系图，学会了你也可以快速绘制UML类图了，分享到此结束！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JAVA之UML类图学习笔记&quot;&gt;&lt;a href=&quot;#JAVA之UML类图学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JAVA之UML类图学习笔记&quot;&gt;&lt;/a&gt;JAVA之UML类图学习笔记&lt;/h2&gt;&lt;p&gt;学习设计模式必不可少需要了解熟悉各个模式的U
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="UML类图" scheme="http://www.devcheng.net/tags/UML%E7%B1%BB%E5%9B%BE/"/>
    
      <category term="类图" scheme="http://www.devcheng.net/tags/%E7%B1%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能优化命令Explain使用介绍</title>
    <link href="http://www.devcheng.net/post/506c22fa.html"/>
    <id>http://www.devcheng.net/post/506c22fa.html</id>
    <published>2021-10-20T11:42:53.000Z</published>
    <updated>2021-10-20T12:15:56.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL 提供了一个 EXPLAIN 命令, 它可以对 <code>SELECT</code> 语句进行分析, 并输出 <code>SELECT</code> 执行的详细信息, 以供开发人员针对性优化.<br>EXPLAIN 命令用法十分简单, 在 SELECT 语句前加上 Explain 就可以了, 例如:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">from</span> user_info <span class="keyword">WHERE</span>  id &lt; <span class="number">300</span>;</span><br></pre></td></tr></table></figure><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>为了接下来方便演示 EXPLAIN 的使用, 首先我们需要建立两个测试用的表, 并添加相应的数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_info`</span> (</span><br><span class="line">  <span class="string">`id`</span>   <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`age`</span>  <span class="built_in">INT</span>(<span class="number">11</span>)              <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`name_index`</span> (<span class="string">`name`</span>)</span><br><span class="line">)</span><br><span class="line">  <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'xys'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'a'</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'b'</span>, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'c'</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'d'</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'e'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'f'</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'g'</span>, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'h'</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">'i'</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`order_info`</span> (</span><br><span class="line">  <span class="string">`id`</span>           <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_id`</span>      <span class="built_in">BIGINT</span>(<span class="number">20</span>)           <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`product_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`productor`</span>    <span class="built_in">VARCHAR</span>(<span class="number">30</span>)          <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`user_product_detail_index`</span> (<span class="string">`user_id`</span>, <span class="string">`product_name`</span>, <span class="string">`productor`</span>)</span><br><span class="line">)</span><br><span class="line">  <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'p1'</span>, <span class="string">'WHH'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'p2'</span>, <span class="string">'WL'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'p1'</span>, <span class="string">'DX'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'p1'</span>, <span class="string">'WHH'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'p5'</span>, <span class="string">'WL'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'p3'</span>, <span class="string">'MA'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'p1'</span>, <span class="string">'WHH'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'p1'</span>, <span class="string">'WHH'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">'p8'</span>, <span class="string">'TE'</span>);</span><br></pre></td></tr></table></figure><h2 id="EXPLAIN-输出格式"><a href="#EXPLAIN-输出格式" class="headerlink" title="EXPLAIN 输出格式"></a>EXPLAIN 输出格式</h2><p>EXPLAIN 命令的输出内容大致如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from user_info where id = 2\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>各列的含义如下:</p><ul><li>id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</li><li>select_type: SELECT 查询的类型.</li><li>table: 查询的是哪个表</li><li>partitions: 匹配的分区</li><li>type: join 类型</li><li>possible_keys: 此次查询中可能选用的索引</li><li>key: 此次查询中确切使用到的索引.</li><li>ref: 哪个字段或常数与 key 一起被使用</li><li>rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</li><li>filtered: 表示此查询条件所过滤的数据的百分比</li><li>extra: 额外的信息</li></ul><p>接下来我们来重点看一下比较重要的几个字段.</p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p><code>select_type</code> 表示了查询的类型, 它的常用取值有:</p><ul><li>SIMPLE, 表示此查询不包含 UNION 查询或子查询</li><li>PRIMARY, 表示此查询是最外层的查询</li><li>UNION, 表示此查询是 UNION 的第二或随后的查询</li><li>DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询</li><li>UNION RESULT, UNION 的结果</li><li>SUBQUERY, 子查询中的第一个 SELECT</li><li>DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</li></ul><p>最常见的查询类别应该是 <code>SIMPLE</code> 了, 比如当我们的查询没有子查询, 也没有 UNION 查询时, 那么通常就是 <code>SIMPLE</code> 类型, 例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from user_info where id = 2\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>如果我们使用了 UNION 查询, 那么 EXPLAIN 输出 的结果类似如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN (SELECT * FROM user_info  WHERE id IN (1, 2, 3))</span><br><span class="line">    -&gt; UNION</span><br><span class="line">    -&gt; (SELECT * FROM user_info WHERE id IN (3, 4, 5));</span><br><span class="line">+<span class="comment">----+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+</span></span><br><span class="line">| id | select_type  | table      | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra           |</span><br><span class="line">+<span class="comment">----+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+</span></span><br><span class="line">|  1 | PRIMARY      | user_info  | NULL       | range | PRIMARY       | PRIMARY | 8       | NULL |    3 |   100.00 | Using where     |</span><br><span class="line">|  2 | UNION        | user_info  | NULL       | range | PRIMARY       | PRIMARY | 8       | NULL |    3 |   100.00 | Using where     |</span><br><span class="line">| NULL | UNION RESULT | &lt;union1,2&gt; | NULL       | ALL   | NULL          | NULL    | NULL    | NULL | NULL |     NULL | Using temporary |</span><br><span class="line">+<span class="comment">----+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>表示查询涉及的表或衍生表</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p><code>type</code> 字段比较重要, 它提供了判断查询是否高效的重要依据依据. 通过 <code>type</code> 字段, 我们判断此次查询是 <code>全表扫描</code> 还是 <code>索引扫描</code> 等.</p><h4 id="type-常用类型"><a href="#type-常用类型" class="headerlink" title="type 常用类型"></a>type 常用类型</h4><p>type 常用的取值有:</p><ul><li><code>system</code>: 表中只有一条数据. 这个类型是特殊的 <code>const</code> 类型.</li><li><code>const</code>: 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据. const 查询速度非常快, 因为它仅仅读取一次即可.<br>例如下面的这个查询, 它使用了主键索引, 因此 <code>type</code> 就是 <code>const</code> 类型的.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from user_info where id = 2\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li><code>eq_ref</code>: 此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 <code>=</code>, 查询效率较高. 例如:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: user_product_detail_index</span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: 314</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 9</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where; Using index</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: eq_ref</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: test.order_info.user_id</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li><code>ref</code>: 此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 <code>最左前缀</code> 规则索引的查询.<br>例如下面这个例子中, 就使用到了 <code>ref</code> 类型的查询:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id AND order_info.user_id = 5\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: user_product_detail_index</span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: 9</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li><code>range</code>: 表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN() 操作中.<br>当 <code>type</code> 是 <code>range</code> 时, 那么 EXPLAIN 输出的 <code>ref</code> 字段为 NULL, 并且 <code>key_len</code> 字段是此次查询中使用到的索引的最长的那个.</li></ul><p>例如下面的例子就是一个范围查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT *</span><br><span class="line">    -&gt;         FROM user_info</span><br><span class="line">    -&gt;         WHERE id BETWEEN 2 AND 8 \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: range</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 7</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li><code>index</code>: 表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据.<br><code>index</code> 类型通常出现在: 所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据. 当是这种情况时, Extra 字段 会显示 <code>Using index</code>.</li></ul><p>例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT name FROM  user_info \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: name_index</span><br><span class="line">      key_len: 152</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 10</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>上面的例子中, 我们查询的 name 字段恰好是一个索引, 因此我们直接从索引中获取数据就可以满足查询的需求了, 而不需要查询表中的数据. 因此这样的情况下, type 的值是 <code>index</code>, 并且 Extra 的值是 <code>Using index</code>.</p><ul><li>ALL: 表示全表扫描, 这个类型的查询是性能最差的查询之一. 通常来说, 我们的查询不应该出现 ALL 类型的查询, 因为这样的查询在数据量大的情况下, 对数据库的性能是巨大的灾难. 如一个查询是 ALL 类型查询, 那么一般来说可以对相应的字段添加索引来避免.<br>下面是一个全表扫描的例子, 可以看到, 在全表扫描时, possible_keys 和 key 字段都是 NULL, 表示没有使用到索引, 并且 rows 十分巨大, 因此整个查询效率是十分低下的.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT age FROM  user_info WHERE age = 20 \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 10</span><br><span class="line">     filtered: 10.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="type-类型的性能比较"><a href="#type-类型的性能比较" class="headerlink" title="type 类型的性能比较"></a>type 类型的性能比较</h4><p>通常来说, 不同的 type 类型的性能关系如下:<br><code>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</code><br><code>ALL</code> 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.<br>而 <code>index</code> 类型的查询虽然不是全表扫描, 但是它扫描了所有的索引, 因此比 ALL 类型的稍快.<br>后面的几种类型都是利用了索引来查询数据, 因此可以过滤部分或大部分数据, 因此查询效率就比较高了.</p><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p><code>possible_keys</code> 表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 <code>possible_keys</code> 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 <code>key</code> 字段决定.</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>此字段是 MySQL 在当前查询时所真正使用到的索引.</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.<br>key_len 的计算规则如下:</p><ul><li>字符串<ul><li>char(n): n 字节长度</li><li>varchar(n): 如果是 utf8 编码, 则是 3 <em>n + 2字节; 如果是 utf8mb4 编码, 则是 4</em> n + 2 字节.</li></ul></li><li>数值类型:<ul><li>TINYINT: 1字节</li><li>SMALLINT: 2字节</li><li>MEDIUMINT: 3字节</li><li>INT: 4字节</li><li>BIGINT: 8字节</li></ul></li><li>时间类型<ul><li>DATE: 3字节</li><li>TIMESTAMP: 4字节</li><li>DATETIME: 8字节</li></ul></li><li>字段属性: NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.</li></ul><p>我们来举两个简单的栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM order_info WHERE user_id &lt; 3 AND product_name = &apos;p1&apos; AND productor = &apos;WHH&apos; \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: range</span><br><span class="line">possible_keys: user_product_detail_index</span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: 9</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 5</span><br><span class="line">     filtered: 11.11</span><br><span class="line">        Extra: Using where; Using index</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>上面的例子是从表 order_info 中查询指定的内容, 而我们从此表的建表语句中可以知道, 表 <code>order_info</code> 有一个联合索引:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)</span><br></pre></td></tr></table></figure><p>不过此查询语句 <code>WHERE user_id &lt; 3 AND product_name = &#39;p1&#39; AND productor = &#39;WHH&#39;</code> 中, 因为先进行 user_id 的范围查询, 而根据 <code>最左前缀匹配</code> 原则, 当遇到范围查询时, 就停止索引的匹配, 因此实际上我们使用到的索引的字段只有 <code>user_id</code>, 因此在 <code>EXPLAIN</code> 中, 显示的 key_len 为 9. 因为 user_id 字段是 BIGINT, 占用 8 字节, 而 NULL 属性占用一个字节, 因此总共是 9 个字节. 若我们将user_id 字段改为 <code>BIGINT(20) NOT NULL DEFAULT &#39;0&#39;</code>, 则 key_length 应该是8.</p><p>上面因为 <code>最左前缀匹配</code> 原则, 我们的查询仅仅使用到了联合索引的 <code>user_id</code> 字段, 因此效率不算高.</p><p>接下来我们来看一下下一个例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM order_info WHERE user_id = 1 AND product_name = 'p1' \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: user_product_detail_index</span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: 161</span><br><span class="line">          ref: const,const</span><br><span class="line">         rows: 2</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这次的查询中, 我们没有使用到范围查询, key_len 的值为 161. 为什么呢? 因为我们的查询条件 <code>WHERE user_id = 1 AND product_name = &#39;p1&#39;</code> 中, 仅仅使用到了联合索引中的前两个字段, 因此 <code>keyLen(user_id) + keyLen(product_name) = 9 + 50 * 3 + 2 = 161</code></p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>rows 也是一个重要的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数.<br>这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.</p><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:</p><ul><li>Using filesort<br>当 Extra 中有 <code>Using filesort</code> 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 <code>Using filesort</code>, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.</li></ul><p>例如下面的例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM order_info ORDER BY product_name \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: 253</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 9</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index; Using filesort</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>我们的索引是</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)</span><br></pre></td></tr></table></figure><p>但是上面的查询中根据 <code>product_name</code> 来排序, 因此不能使用索引进行优化, 进而会产生 <code>Using filesort</code>.<br>如果我们将排序依据改为 <code>ORDER BY user_id, product_name</code>, 那么就不会出现 <code>Using filesort</code> 了. 例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM order_info ORDER BY user_id, product_name \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: 253</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 9</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>Using index<br>“覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li><li>Using temporary<br>查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;MySQL 提供了一个 EXPLAIN 命令, 它可以对 &lt;code&gt;SELECT&lt;/code&gt; 语句进行分析, 并输出 &lt;code&gt;SEL
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="MySQL优化" scheme="http://www.devcheng.net/tags/MySQL%E4%BC%98%E5%8C%96/"/>
    
      <category term="Explain" scheme="http://www.devcheng.net/tags/Explain/"/>
    
  </entry>
  
  <entry>
    <title>来一波安利手绘流程图神器，亲测好用</title>
    <link href="http://www.devcheng.net/post/70b4b9af.html"/>
    <id>http://www.devcheng.net/post/70b4b9af.html</id>
    <published>2021-10-17T08:31:24.000Z</published>
    <updated>2021-10-17T08:46:49.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>前几天在gitee无意浏览其它小伙伴分享源码时，我惊奇的发现人家写的md文档里面的流程图（配图）和一般的不太一样，常规的线条都是规规矩矩，四四方方的。可能是看多了常规的流程图的原因，让我才如此惊奇，</p><p><strong>常规的图如下</strong>：</p><p><img src="https://pic2.zhimg.com/v2-46b50a7988961668d1e064db6ab30451_r.jpg" alt="preview"></p><p><strong>不一样的风格流程图如下</strong>：</p><p><img src="/images/image-20211017152014148.png" alt="“伊成博客”"></p><p>网上查询了一下，这不一样的风格流程图叫 手绘流程图。顾名思义就是类似徒手绘画出来的，继续查询了一番，终于在某乎上发现了一个不错的神器。</p><p><img src="/images/image-20211017152633838.png" alt="“伊成博客”"></p><h1 id="神器之draw-io"><a href="#神器之draw-io" class="headerlink" title="神器之draw.io"></a>神器之draw.io</h1><h2 id="draw-io-是啥玩意"><a href="#draw-io-是啥玩意" class="headerlink" title="draw.io 是啥玩意"></a>draw.io 是啥玩意</h2><p>百度了一番，才知道<em>draw.io</em> 是一款免费的在线图表编辑工具, 可以用来编辑工作流, BPM, org charts, UML, ER图, 网络拓朴图等.</p><p><img src="/images/image-20211017152910249.png" alt="“伊成博客”"></p><h1 id="如何使用draw-io-绘制手绘风格的图"><a href="#如何使用draw-io-绘制手绘风格的图" class="headerlink" title="如何使用draw.io 绘制手绘风格的图"></a>如何使用draw.io 绘制手绘风格的图</h1><p>访问draw.io 之后就可以开始画图了，但是我拖了一个椭圆出来之后发现还是常规的圆，这和我期望的不一致啊，后来一顿操作摸索下来，需要在勾选 Sketch 。</p><p>接着就可以愉快的绘制你想要的手绘风格的各种图了。</p><p><img src="/images/image-20211017153439685.png" alt="“伊成博客”"></p><p>欣赏几张我绘制的吧！</p><hr><h4 id="JDBC执行流程"><a href="#JDBC执行流程" class="headerlink" title="JDBC执行流程"></a>JDBC执行流程</h4><p><img src="/images/devcheng_net_jdbc6.png" alt="“伊成博客”"></p><hr><h4 id="TCP三次握手，四次挥手"><a href="#TCP三次握手，四次挥手" class="headerlink" title="TCP三次握手，四次挥手"></a>TCP三次握手，四次挥手</h4><p><img src="/images/image-20211017162547007.png" alt="“伊成博客”"></p><p>以上分享到此结束！</p><p>draw.io地址： <a href="https://app.diagrams.net/" target="_blank" rel="noopener">https://app.diagrams.net/</a></p><hr><p>The end…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;前几天在gitee无意浏览其它小伙伴分享源码时，我惊奇的发现人家写的md文档里面的流程图（配图）和一般的不太一样，常规的线条
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="手绘流程图" scheme="http://www.devcheng.net/tags/%E6%89%8B%E7%BB%98%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
      <category term="draw.io" scheme="http://www.devcheng.net/tags/draw-io/"/>
    
  </entry>
  
  <entry>
    <title>jenkins打包前端项目</title>
    <link href="http://www.devcheng.net/post/92a007c9.html"/>
    <id>http://www.devcheng.net/post/92a007c9.html</id>
    <published>2021-09-24T01:27:47.000Z</published>
    <updated>2021-09-24T01:37:05.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>这里我的 Jenkins版本是：2.303.1</p><p><img src="/images/image-20210923153840448.png" alt="“伊成博客”"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>点击 左边菜单栏中 “Manage Jenkins”  –&gt; “Manager Plugins”。</p><p><img src="/images/image-20210923153947249.png" alt="“伊成博客”"></p><p>在输入框中输入 nodeJS,搜索安装即可（我这里是已经安装过了的截图）</p><p><img src="/images/image-20210923154210082.png" alt="“伊成博客”"></p><h2 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h2><p><img src="/images/image-20210923154511889.png" alt="“伊成博客”"></p><p>选择对应的版本，点击 保存 和 应用 按钮即可。</p><p><img src="/images/image-20210923154603315.png" alt="“伊成博客”"></p><p>做到这，准备工作都已经作完了，接着就是创建一个任务。</p><h2 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h2><p>输入名称，选择一个自由风格的项目。</p><p><img src="/images/image-20210923154808081.png" alt="“伊成博客”"></p><p>配置General(我这里保持构建的最大个数写的是 10，大家可以按需配置)</p><p><img src="/images/image-20210923154921941.png" alt="“伊成博客”"></p><p>配置 源码管理，填写对应的项目gitlab地址。</p><p><img src="/images/image-20210923155040885.png" alt="“伊成博客”"></p><p>配置构建环境</p><p><img src="/images/image-20210923155138628.png" alt="“伊成博客”"></p><p>配置构建</p><p>在构建中选择执行shell</p><p><img src="/images/image-20210923155213737.png" alt="“伊成博客”"></p><p>对应的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH </span><br><span class="line">node -v  </span><br><span class="line">npm -v   </span><br><span class="line">npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行成功后可以看到控制台输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> DONE  Build complete. The dist directory is ready to be deployed.</span><br><span class="line"> INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html</span><br><span class="line">      </span><br><span class="line">Finished: SUCCESS</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210923155740843.png" alt="“伊成博客”"></p><hr><p>The end …</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;这里我的 Jenkins版本是：2.303.1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/image-2021092
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="jenkins" scheme="http://www.devcheng.net/tags/jenkins/"/>
    
      <category term="jenkins打包" scheme="http://www.devcheng.net/tags/jenkins%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>如何配置虚拟机互相免密ssh登录</title>
    <link href="http://www.devcheng.net/post/3ab16e7d.html"/>
    <id>http://www.devcheng.net/post/3ab16e7d.html</id>
    <published>2021-08-31T12:02:25.000Z</published>
    <updated>2021-08-31T12:07:27.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如何让多台虚拟机之间免密互相可登录，接下来我们实战演示一下。</p><p>实现准备2台服务器，各自的IP分别为 192.168.191.128 和 192.168.191.129 。</p><h3 id="①-查看ssh-server状态"><a href="#①-查看ssh-server状态" class="headerlink" title="① 查看ssh server状态"></a>① 查看ssh server状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# systemctl status sshd</span><br><span class="line">● sshd.service - OpenSSH server daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 二 2021-08-31 15:13:37 CST; 23min ago</span><br><span class="line">     Docs: man:sshd(8)</span><br><span class="line">           man:sshd_config(5)</span><br><span class="line"> Main PID: 1082 (sshd)</span><br><span class="line">    Tasks: 1</span><br><span class="line">   CGroup: /system.slice/sshd.service</span><br><span class="line">           └─1082 /usr/sbin/sshd -D</span><br><span class="line"></span><br><span class="line">8月 31 15:13:37 jenkins systemd[1]: Starting OpenSSH server daemon...</span><br><span class="line">8月 31 15:13:37 jenkins sshd[1082]: Server listening on 0.0.0.0 port 22.</span><br><span class="line">8月 31 15:13:37 jenkins sshd[1082]: Server listening on :: port 22.</span><br><span class="line">8月 31 15:13:37 jenkins systemd[1]: Started OpenSSH server daemon.</span><br><span class="line">8月 31 15:14:48 jenkins sshd[3227]: Accepted password for root from 192.168.191.1 port 53268 ssh2</span><br><span class="line">8月 31 15:33:28 jenkins sshd[27315]: Connection closed by 192.168.191.128 port 35046 [preauth]</span><br><span class="line">8月 31 15:33:28 jenkins sshd[27382]: Connection closed by 192.168.191.128 port 35048 [preauth]</span><br></pre></td></tr></table></figure><p>由以上信息得知，这台服务器以及安装了对应ssh server 。 </p><p>如果没有安装请点击 这个连接<br><a href="https://www.cnblogs.com/liuhouhou/p/8975812.html" target="_blank" rel="noopener">安装ssh-server传送门</a></p><h3 id="②-开始配置root用户ssh免密登录"><a href="#②-开始配置root用户ssh免密登录" class="headerlink" title="② 开始配置root用户ssh免密登录"></a>② 开始配置root用户ssh免密登录</h3><p>执行 ssh-keygen -t rsa 命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:mrzfLe+SUFFjuDmXsasdwX173L+j2fgqhI8jJagQ root@jenkins</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|           o+    |</span><br><span class="line">|          o. .   |</span><br><span class="line">|           + .   |</span><br><span class="line">|  E       * o    |</span><br><span class="line">|   .  .  S. *. . |</span><br><span class="line">|    .+ =. +...o =|</span><br><span class="line">|   .  O ..o+.B .*|</span><br><span class="line">|    .. . o+oo.* =|</span><br><span class="line">|   .. ... .B=o+=o|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure></p><p>接着继续执行 ssh-copy-id -i ~/.ssh/id_rsa.pub <a href="mailto:root@192.168.191.128" target="_blank" rel="noopener">root@192.168.191.128</a> 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.191.128</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.191.128&apos;s password: //输入对应的root密码</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &apos;root@192.168.191.128&apos;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure></p><p>看到以上提示信息，就成功了。可以使用 ssh <a href="mailto:&#39;root@192.168.191.128" target="_blank" rel="noopener">&#39;root@192.168.191.128</a>‘ 免密登录对应服务器了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# ssh &apos;root@192.168.191.128&apos;</span><br><span class="line">Last login: Tue Aug 31 15:34:01 2021 from 192.168.191.1</span><br><span class="line">[root@gitlab ~]#</span><br></pre></td></tr></table></figure><p>对应的原理再另外一台服务器也这么操作即可。</p><p>这样就实现了这2台服务器互相免密可ssh 登录了！</p><hr><p>The end…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;如何让多台虚拟机之间免密互相可登录，接下来我们实战演示一下。&lt;/p&gt;
&lt;p&gt;实现准备2台服务器，各自的IP分别为 192.168.191.1
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="ssh免密登陆" scheme="http://www.devcheng.net/tags/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/"/>
    
  </entry>
  
  <entry>
    <title>如何批量添加单引号(逗号)</title>
    <link href="http://www.devcheng.net/post/79b571d7.html"/>
    <id>http://www.devcheng.net/post/79b571d7.html</id>
    <published>2021-08-17T12:56:24.000Z</published>
    <updated>2021-08-17T13:01:22.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在工作中可能会遇到这样的需求，客户（领导、同事）给你很多数据，你需要添加对应的单引号(or逗号)。数据量少的情况可以采用笨方法一个一个的处理，<br>但是数据量大的时候那怎么办呢？</p><p>借助一个神器，它就是 “Visual Studio Code”！</p><p><img src="/images/devcheng_net_vscode10001.png" alt="“伊成博客”"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><img src="/images/devcheng_net_vscode10002.png" alt="“伊成博客”"></p><p>假如客户（领导、同事）给你的是这样的一个txt文件，这个文件里面有很多数据。</p><h2 id="解决方法-vsCode方案"><a href="#解决方法-vsCode方案" class="headerlink" title="解决方法(vsCode方案)"></a>解决方法(vsCode方案)</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>这里我们借助 vsCode ,先打开 vsCode 。</p><p>接着双击编辑区，看下图：</p><p><img src="/images/devcheng_net_vscode10003.png" alt="“伊成博客”"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>把准备工作中的txt文件里面的数据复制进去。</p><p><img src="/images/devcheng_net_vscode10004.png" alt="“伊成博客”"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>鼠标放在文件最开始的地方，然后 ‘Alt + Shift’ 按住鼠标左键往下滑。然后你就可以输入你想要的符号了，例如我这里第一行我输入单引号，然后再最后一行我也输入一个单引号<br>并且加了一个逗号。</p><p>如下图：</p><p><img src="/images/devcheng_net_vscode10005.gif" alt="“伊成博客”"></p><h2 id="解决方法-notepad-方案"><a href="#解决方法-notepad-方案" class="headerlink" title="解决方法(notepad++方案)"></a>解决方法(notepad++方案)</h2><p>步骤和上述 vsCode 操作很类似，不一样的地方就是快捷键不一样了，在 notepad++ 里面 ‘Ctrl + Alt + Shift’ 按住鼠标左键往下滑。</p><p><img src="/images/devcheng_net_pad10006.gif" alt="“伊成博客”"></p><p>以上两种解决方案，任君选择。</p><p>好风凭借力，扶摇上青云。</p><p>收藏小技巧，包你事倍功半!</p><hr><p>The end…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在工作中可能会遇到这样的需求，客户（领导、同事）给你很多数据，你需要添加对应的单引号(or逗号)。数据量少的情况可以采用笨方法一个一个的处理
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="批量添加单引号" scheme="http://www.devcheng.net/tags/%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%8D%95%E5%BC%95%E5%8F%B7/"/>
    
      <category term="vscode" scheme="http://www.devcheng.net/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x整合p6spy</title>
    <link href="http://www.devcheng.net/post/b5cbfcc0.html"/>
    <id>http://www.devcheng.net/post/b5cbfcc0.html</id>
    <published>2021-08-06T05:27:03.000Z</published>
    <updated>2021-08-17T12:57:04.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍p6spy"><a href="#介绍p6spy" class="headerlink" title="介绍p6spy"></a>介绍p6spy</h2><p>P6Spy 是针对数据库访问操作的动态监测框架，它使得数据库数据可无缝截取和操纵，而不必对现有应用程序的代码作任何修改。</p><p>P6Spy 分发包包括P6Log，它是一个可记录任何 Java 应用程序的所有JDBC事务的应用程序。其配置完成使用时，可以进行数据访问性能的监测。</p><p><code>P6Spy是一个开源项目，项目首页 www.p6spy.com [项目首页网站不可访问了！]</code></p><h2 id="为何选择p6spy"><a href="#为何选择p6spy" class="headerlink" title="为何选择p6spy"></a>为何选择p6spy</h2><p>在很多项目中我们都会用mybatis打印必要的sql语句，但是对应的参数都是用 ？ 展示。而开发过程中如果我需要看完整的一条sql语句和具体参数值这就需要p6spy了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Preparing: select order_id, order_code, org_remark, add_payment, activity_id, evaluate_score FROM tc_order WHERE 1=1 and category =? and order_status = ? and start_date &lt;=? and third_order_id = ? </span><br><span class="line">2017-06-07 14:30:02,679 [executor-1] DEBUG com.xx.xx.dop2c.order.ext.TcOrderExtDao.queryForQueue - 47 - ==&gt; Parameters: 253(Long), 30(Integer), 2017-06-07 14:30:02(String), 0(String)</span><br></pre></td></tr></table></figure><p>使用p6spy打印的sql如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-08-05 10:05:53.217 INFO 1064 --- [ main] p6spy : 2021-08-05 10:05:53|0|statement|connection 0|url </span><br><span class="line">jdbc:p6spy:h2:./data/test|insert into goods (name, price, create_time, update_time) values (&apos;bottole&apos;, 2500, now(), now())|insert into goods (name, price, create_time, update_time) values (&apos;bottole&apos;, 2500, now(), now())</span><br></pre></td></tr></table></figure><h2 id="Springboot2整合p6spy"><a href="#Springboot2整合p6spy" class="headerlink" title="Springboot2整合p6spy"></a>Springboot2整合p6spy</h2><p>spring boot 版本：2.4.3</p><p>1.添加对应依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;p6spy&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;p6spy&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>2.修改数据库连接URL中加入p6spy</p><p><img src="/images/springboot_p6spy_0806001.png" alt="“伊成博客”"></p><p>3.配置spy.properties<br>将spy.properties复制到项目的resources文件夹中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#3.2.1以上使用</span><br><span class="line">modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span><br><span class="line">#modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory</span><br><span class="line">#3.2.1以下使用或者不配置</span><br><span class="line">#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span><br><span class="line"># 自定义日志打印</span><br><span class="line">logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span><br><span class="line">#日志输出到控制台</span><br><span class="line">appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span><br><span class="line"># 使用日志系统记录 sql</span><br><span class="line">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span><br><span class="line"># 设置 p6spy driver 代理</span><br><span class="line">deregisterdrivers=true</span><br><span class="line"># 取消JDBC URL前缀</span><br><span class="line">useprefix=true</span><br><span class="line"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span><br><span class="line">excludecategories=info,debug,result,commit,resultset</span><br><span class="line"># 日期格式</span><br><span class="line">dateformat=yyyy-MM-dd HH:mm:ss</span><br><span class="line"># 实际驱动可多个</span><br><span class="line">#driverlist=org.h2.Driver</span><br><span class="line"># 是否开启慢SQL记录</span><br><span class="line">outagedetection=true</span><br><span class="line"># 慢SQL记录标准 2 秒</span><br><span class="line">outagedetectioninterval=2</span><br></pre></td></tr></table></figure><p>这样就大功告成了，我们在运行项目的时候就可以在控制台中看到具体的sql语句了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consume Time：0 ms 2021-08-05 11:16:24</span><br><span class="line">Execute SQL：SELECT * FROM tb_data_info WHERE datasource_id = 74</span><br></pre></td></tr></table></figure><hr><p>The end…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍p6spy&quot;&gt;&lt;a href=&quot;#介绍p6spy&quot; class=&quot;headerlink&quot; title=&quot;介绍p6spy&quot;&gt;&lt;/a&gt;介绍p6spy&lt;/h2&gt;&lt;p&gt;P6Spy 是针对数据库访问操作的动态监测框架，它使得数据库数据可无缝截取和操纵，而不必对现有应用程
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="springboot2" scheme="http://www.devcheng.net/tags/springboot2/"/>
    
      <category term="p6spy" scheme="http://www.devcheng.net/tags/p6spy/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序使用async提示regeneratorRuntime is not defined异常</title>
    <link href="http://www.devcheng.net/post/12b3c63e.html"/>
    <id>http://www.devcheng.net/post/12b3c63e.html</id>
    <published>2021-07-07T14:31:14.000Z</published>
    <updated>2021-07-07T14:34:49.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>微信小程序使用async提示regeneratorRuntime is not defined异常。</p><p><img src="/images/wxmini1.png" alt="“伊成博客”"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>新版本的小程序支持async / await。勾选下面选项后重新编译程序即可</p><p>点击 ‘详情’ – ‘本地设置’ – 勾选 ‘ES6转ES5’ 和 ‘增强编译’，然后重新编译即可。</p><p><img src="/images/wxmini2.png" alt="“伊成博客”"></p><p>完美解决问题！</p><p>更新时间：2021-7-7</p><hr><p>The end…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;微信小程序使用async提示regeneratorRuntime is not defined异常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/i
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="微信小程序" scheme="http://www.devcheng.net/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="regeneratorRuntime is not defined" scheme="http://www.devcheng.net/tags/regeneratorRuntime-is-not-defined/"/>
    
  </entry>
  
  <entry>
    <title>springBoot启动提示If you want an embedded database (H2, HSQL or Derby), please put</title>
    <link href="http://www.devcheng.net/post/7dd074b3.html"/>
    <id>http://www.devcheng.net/post/7dd074b3.html</id>
    <published>2021-05-26T11:47:56.000Z</published>
    <updated>2021-05-26T12:01:44.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Springboot启动时报错 If you want an embedded database (H2, HSQL or Derby), please put it on the classpath</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>对于这个异常的解决方案，网上绝大部分都是说：在启动的类中的@SpringBootApplication 改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)//排除自动配置</span><br><span class="line">public class ErukaServerMain &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ErukaServerMain.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样改没有解决实际的问题。</p><p>产生这个错误的原因是Spring Boot的自动配置，如果你没有配置DataSource就会导致下图这个错误。</p><p>那如果你很确定，比如你就是要Spring Boot + Mybatis + MySQL 整合的代码，此时就应该去检查你的配置文件中是否正确配置了数据库连接。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>下面我们举个栗子复现这个问题，这里我使用Spring Boot + JPA + MySQL整合一个demo。</p><p>在数据库链接配置文件中，我们故意写错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.mysql.jdbc-url=jdbc:mysql://127.0.0.1:3306/beauty_atlas_server?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span><br><span class="line">spring.datasource.mysql.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.mysql.username=root</span><br><span class="line">spring.datasource.mysql.password=root</span><br></pre></td></tr></table></figure></p><p>tips: Spring Boot + JPA 配置连接数据库 可不是用 spring.datasource.mysql.jdbc-url 这个哦，以上的这块配置都是错的，这个时候你启动就会提示</p><p><img src="/images/devcheng_net_zhengheyichang.png" alt="“论坛内容管理系统”"></p><p>那正确的解决方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 数据库配置 spring boot + jpa 数据库配置前缀是下面这样的</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/beauty_atlas_server?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure><p>由上可见，Spirng Boot 和不同的持久层整合这些配置都是有所区别的，在整合的过程中一定要慎重。<br>Spring Boot + JPA + MySQL 整合中还得配置DataSource，把它注入到Spring中接口，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix=&quot;spring.datasource&quot;)</span><br><span class="line">public class DbConfig &#123;</span><br><span class="line"></span><br><span class="line">    private String url;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource getDataSource() &#123;</span><br><span class="line">        DruidDataSource dataSource = new DruidDataSource();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUrl() &#123;</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUrl(String url) &#123;</span><br><span class="line">        this.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新启动，项目无问题了。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;Springboot启动时报错 If you want an embedded database (H2, HSQL or Derby), 
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="异常" scheme="http://www.devcheng.net/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="SpringBoot" scheme="http://www.devcheng.net/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL关键字大全</title>
    <link href="http://www.devcheng.net/post/7024f457.html"/>
    <id>http://www.devcheng.net/post/7024f457.html</id>
    <published>2021-05-25T12:29:23.000Z</published>
    <updated>2021-05-25T12:45:48.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在创建表的时候一定使用到MYSQL的关键字，前几天我同事在对接别人的接口中就遇到了这个问题，别人的接口中返回了一个 ‘desc’,他毫不犹豫地创建表的时候也用了’desc’。</p><p>结果死活保存不了这条数据。后面排查代码才发现使用了MYSQL的关键子了。</p><p>以下都是整理出来所有的MySQL关键字，为了避免踩坑，建议收藏！！！</p><h2 id="MySQL关键字"><a href="#MySQL关键字" class="headerlink" title="MySQL关键字"></a>MySQL关键字</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>ADD</td><td>ALL</td><td>ALTER</td></tr><tr><td>ANALYZE</td><td>AND</td><td>AS</td></tr><tr><td>ASC</td><td>ASENSITIVE</td><td>BEFORE</td></tr><tr><td>BETWEEN</td><td>BIGINT</td><td>BINARY</td></tr><tr><td>BLOB</td><td>BOTH</td><td>BY</td></tr><tr><td>CALL</td><td>CASCADE</td><td>CASE</td></tr><tr><td>CHANGE</td><td>CHAR</td><td>CHARACTER</td></tr><tr><td>CHECK</td><td>COLLATE</td><td>COLUMN</td></tr><tr><td>CONDITION</td><td>CONNECTION</td><td>CONSTRAINT</td></tr><tr><td>CONTINUE</td><td>CONVERT</td><td>CREATE</td></tr><tr><td>CROSS</td><td>CURRENT_DATE</td><td>CURRENT_TIME</td></tr><tr><td>CURRENT_TIMESTAMP</td><td>CURRENT_USER</td><td>CURSOR</td></tr><tr><td>DATABASE</td><td>DATABASES</td><td>DAY_HOUR</td></tr><tr><td>DAY_MICROSECOND</td><td>DAY_MINUTE</td><td>DAY_SECOND</td></tr><tr><td>DEC</td><td>DECIMAL</td><td>DECLARE</td></tr><tr><td>DEFAULT</td><td>DELAYED</td><td>DELETE</td></tr><tr><td>DESC</td><td>DESCRIBE</td><td>DETERMINISTIC</td></tr><tr><td>DISTINCT</td><td>DISTINCTROW</td><td>DIV</td></tr><tr><td>DOUBLE</td><td>DROP</td><td>DUAL</td></tr><tr><td>EACH</td><td>ELSE</td><td>ELSEIF</td></tr><tr><td>ENCLOSED</td><td>ESCAPED</td><td>EXISTS</td></tr><tr><td>EXIT</td><td>EXPLAIN</td><td>FALSE</td></tr><tr><td>FETCH</td><td>FLOAT</td><td>FLOAT4</td></tr><tr><td>FLOAT8</td><td>FOR</td><td>FORCE</td></tr><tr><td>FOREIGN</td><td>FROM</td><td>FULLTEXT</td></tr><tr><td>GOTO</td><td>GRANT</td><td>GROUP</td></tr><tr><td>HAVING</td><td>HIGH_PRIORITY</td><td>HOUR_MICROSECOND</td></tr><tr><td>HOUR_MINUTE</td><td>HOUR_SECOND</td><td>IF</td></tr><tr><td>IGNORE</td><td>IN</td><td>INDEX</td></tr><tr><td>INFILE</td><td>INNER</td><td>INOUT</td></tr><tr><td>INSENSITIVE</td><td>INSERT</td><td>INT</td></tr><tr><td>INT1</td><td>INT2</td><td>INT3</td></tr><tr><td>INT4</td><td>INT8</td><td>INTEGER</td></tr><tr><td>INTERVAL</td><td>INTO</td><td>IS</td></tr><tr><td>ITERATE</td><td>JOIN</td><td>KEY</td></tr><tr><td>KEYS</td><td>KILL</td><td>LABEL</td></tr><tr><td>LEADING</td><td>LEAVE</td><td>LEFT</td></tr><tr><td>LIKE</td><td>LIMIT</td><td>LINEAR</td></tr><tr><td>LINES</td><td>LOAD</td><td>LOCALTIME</td></tr><tr><td>LOCALTIMESTAMP</td><td>LOCK</td><td>LONG</td></tr><tr><td>LONGBLOB</td><td>LONGTEXT</td><td>LOOP</td></tr><tr><td>LOW_PRIORITY</td><td>MATCH</td><td>MEDIUMBLOB</td></tr><tr><td>MEDIUMINT</td><td>MEDIUMTEXT</td><td>MIDDLEINT</td></tr><tr><td>MINUTE_MICROSECOND</td><td>MINUTE_SECOND</td><td>MOD</td></tr><tr><td>MODIFIES</td><td>NATURAL</td><td>NOT</td></tr><tr><td>NO_WRITE_TO_BINLOG</td><td>NULL</td><td>NUMERIC</td></tr><tr><td>ON</td><td>OPTIMIZE</td><td>OPTION</td></tr><tr><td>OPTIONALLY</td><td>OR</td><td>ORDER</td></tr><tr><td>OUT</td><td>OUTER</td><td>OUTFILE</td></tr><tr><td>PRECISION</td><td>PRIMARY</td><td>PROCEDURE</td></tr><tr><td>PURGE</td><td>RAID0</td><td>RANGE</td></tr><tr><td>READ</td><td>READS</td><td>REAL</td></tr><tr><td>REFERENCES</td><td>REGEXP</td><td>RELEASE</td></tr><tr><td>RENAME</td><td>REPEAT</td><td>REPLACE</td></tr><tr><td>REQUIRE</td><td>RESTRICT</td><td>RETURN</td></tr><tr><td>REVOKE</td><td>RIGHT</td><td>RLIKE</td></tr><tr><td>SCHEMA</td><td>SCHEMAS</td><td>SECOND_MICROSECOND</td></tr><tr><td>SELECT</td><td>SENSITIVE</td><td>SEPARATOR</td></tr><tr><td>SET</td><td>SHOW</td><td>SMALLINT</td></tr><tr><td>SPATIAL</td><td>SPECIFIC</td><td>SQL</td></tr><tr><td>SQLEXCEPTION</td><td>SQLSTATE</td><td>SQLWARNING</td></tr><tr><td>SQL_BIG_RESULT</td><td>SQL_CALC_FOUND_ROWS</td><td>SQL_SMALL_RESULT</td></tr><tr><td>SSL</td><td>STARTING</td><td>STRAIGHT_JOIN</td></tr><tr><td>TABLE</td><td>TERMINATED</td><td>THEN</td></tr><tr><td>TINYBLOB</td><td>TINYINT</td><td>TINYTEXT</td></tr><tr><td>TO</td><td>TRAILING</td><td>TRIGGER</td></tr><tr><td>TRUE</td><td>UNDO</td><td>UNION</td></tr><tr><td>UNIQUE</td><td>UNLOCK</td><td>UNSIGNED</td></tr><tr><td>UPDATE</td><td>USAGE</td><td>USE</td></tr><tr><td>USING</td><td>UTC_DATE</td><td>UTC_TIME</td></tr><tr><td>UTC_TIMESTAMP</td><td>VALUES</td><td>VARBINARY</td></tr><tr><td>VARCHAR</td><td>VARCHARACTER</td><td>VARYING</td></tr><tr><td>WHEN</td><td>WHERE</td><td>WHILE</td></tr><tr><td>WITH</td><td>WRITE</td><td>X509</td></tr><tr><td>XOR</td><td>YEAR_MONTH</td><td>ZEROFILL</td></tr></tbody></table><hr><p>记录一下备忘~</p><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在创建表的时候一定使用到MYSQL的关键字，前几天我同事在对接别人的接口中就遇到了这个问题，别人的接口中返回了一个 ‘des
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="mysql关键字" scheme="http://www.devcheng.net/tags/mysql%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="mysql" scheme="http://www.devcheng.net/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>启动nginx提示Job for nginx.service failed because the control process exited with error code</title>
    <link href="http://www.devcheng.net/post/ceba3d83.html"/>
    <id>http://www.devcheng.net/post/ceba3d83.html</id>
    <published>2021-04-20T12:51:40.000Z</published>
    <updated>2021-04-20T13:03:55.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>启动nginx的时候，提示异常信息如下：</p><p>Job for nginx.service failed because the control process exited with error code.</p><p><img src="/images/devcheng_net_nginx0001.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_nginx0002.png" alt="“伊成博客”"></p><p>查看状态信息,提示配置文件出错: </p><p>“server” directive is not allowed here in /etc/nginx/nginx.conf:39</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>发现端口被占用，centos中查看端口被占用命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp | grep 端口号</span><br></pre></td></tr></table></figure><p>杀掉进程： <strong>ps -9 进程号</strong></p><p>杀掉所有80端口的进程：<strong>lsof -i :80|grep -v “PID”|awk ‘{print “kill -9”,$2}’|sh</strong></p><hr><p>The end…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;启动nginx的时候，提示异常信息如下：&lt;/p&gt;
&lt;p&gt;Job for nginx.service failed becau
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="nginx" scheme="http://www.devcheng.net/tags/nginx/"/>
    
      <category term="nginx.service failed" scheme="http://www.devcheng.net/tags/nginx-service-failed/"/>
    
  </entry>
  
  <entry>
    <title>离职的时候不能说的十句话</title>
    <link href="http://www.devcheng.net/post/462294b4.html"/>
    <id>http://www.devcheng.net/post/462294b4.html</id>
    <published>2021-04-12T13:36:46.000Z</published>
    <updated>2021-04-12T13:44:49.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>又是一年一季的跳槽季，也不知道此刻的你是不是正打算离职了，如果打算离职那你应该好好看看这篇文章。</p><h2 id="10点不能说的"><a href="#10点不能说的" class="headerlink" title="10点不能说的"></a>10点不能说的</h2><h3 id="1：老板很挫"><a href="#1：老板很挫" class="headerlink" title="1：老板很挫"></a>1：老板很挫</h3><p>任何将你的离职与老板的性格或性情联系起来的评论都是无济于事的。<br>他们可能是个食人魔，但如果传回你这么说的消息，他们在与未来的雇主交谈时，更有可能贬低你的态度或表现。</p><h3 id="2：上级领导很挫"><a href="#2：上级领导很挫" class="headerlink" title="2：上级领导很挫"></a>2：上级领导很挫</h3><p>不要说你要离开是因为你的老板不称职，即使这是真的。你的经理会更容易将任何失败归咎于你，并对你的工作做出负面评价。</p><h3 id="3：你在的团队成员有问题"><a href="#3：你在的团队成员有问题" class="headerlink" title="3：你在的团队成员有问题"></a>3：你在的团队成员有问题</h3><p>不要把团队成员的表现或不良态度作为你离职的理由。雇主在调查你的背景时，往往会征求员工以及主管的意见。如果以前的下属或同事因为你的离职言论而受到侮辱，那么他们会更容易提到你作为经理或队友的缺点。</p><h3 id="4：你的能力应该拿更多的收入"><a href="#4：你的能力应该拿更多的收入" class="headerlink" title="4：你的能力应该拿更多的收入"></a>4：你的能力应该拿更多的收入</h3><p>没有必要鼓励管理层将你视为不满的员工，因为这种定性可能会传递给其他询问你在组织的任期的人。</p><h3 id="5：公司的状况很糟糕"><a href="#5：公司的状况很糟糕" class="headerlink" title="5：公司的状况很糟糕"></a>5：公司的状况很糟糕</h3><p>如果你认为公司在某些方面陷入困境或成绩不佳，不要说出来。你的雇主会知道他们组织内部的任何问题。你向管理层传达他们被困在一个糟糕的组织中，而你却在向更好的事情发展，这对你没有任何好处。</p><h3 id="6：公司的产品很糟糕"><a href="#6：公司的产品很糟糕" class="headerlink" title="6：公司的产品很糟糕"></a>6：公司的产品很糟糕</h3><p>不忠诚的员工通常是不受欢迎的。前主管更可能会断言，你成功的任何限制都是由于你的不足，而不是他们产品或服务的缺陷。未来的雇主会怀疑，当你继续前进时，你是否会说他们的坏话。</p><h3 id="7：你没有被给到足够的通知"><a href="#7：你没有被给到足够的通知" class="headerlink" title="7：你没有被给到足够的通知"></a>7：你没有被给到足够的通知</h3><p>突然离职可以用来证明你不是一个敬业或专业的员工的指控。在某些情况下，可以不经通知就辞职，但在大多数情况下，通常是提前两周通知。</p><h3 id="8：你不愿意顺利的交接工作"><a href="#8：你不愿意顺利的交接工作" class="headerlink" title="8：你不愿意顺利的交接工作"></a>8：你不愿意顺利的交接工作</h3><p>这是一个很好的主意，证明你是一个有责任感的员工，直到你的工作结束。为老板缓解过渡期的合作会被记住，并经常得到积极的推荐奖励。</p><h3 id="9：新的工作机会实在是太6了"><a href="#9：新的工作机会实在是太6了" class="headerlink" title="9：新的工作机会实在是太6了"></a>9：新的工作机会实在是太6了</h3><p>不要向其他员工吹嘘你的新工作，因为这可能会引起他们的不满，特别是如果你暗示你比他们更好。感谢他人的支持，并提及你将如何想念与他们一起工作。</p><h3 id="10：你对前公司有意见，而且还要写在邮件里"><a href="#10：你对前公司有意见，而且还要写在邮件里" class="headerlink" title="10：你对前公司有意见，而且还要写在邮件里"></a>10：你对前公司有意见，而且还要写在邮件里</h3><p>不要把任何负面的东西写进去。保持你的辞职信是积极的，这样所有相关人员都会记住你是一个积极的人。学习如何写一封礼貌地说明你要离开的辞职信。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>保持积极的态度。<br>现在不是贬低你的老板，队友，或者即将到来的前雇主的时候。</p><p>以正确的方式辞职。<br>提供至少两周的书面通知 并感谢公司提供的机会。</p><p>从长计议。<br>记住，大多数行业都比他们看起来要小。当你离开时要专业一点，以后你就可以要求推荐人推荐你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;又是一年一季的跳槽季，也不知道此刻的你是不是正打算离职了，如果打算离职那你应该好好看看这篇文章。&lt;/p&gt;
&lt;h2 id=&quot;1
      
    
    </summary>
    
      <category term="codelife" scheme="http://www.devcheng.net/categories/codelife/"/>
    
    
      <category term="职场" scheme="http://www.devcheng.net/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="离职" scheme="http://www.devcheng.net/tags/%E7%A6%BB%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>工作中碰上那些给你挖坑或者带你踩坑的猪队友，你会怎么办？</title>
    <link href="http://www.devcheng.net/post/d7b63f4f.html"/>
    <id>http://www.devcheng.net/post/d7b63f4f.html</id>
    <published>2021-04-10T01:43:25.000Z</published>
    <updated>2021-04-10T01:52:41.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>如果你在工作中碰上那些给你挖坑或者带你踩坑的猪队友，你会怎么办？</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>后台有个老铁就跟我说了这么一件事。</p><p>他是产品经理，上周刚加班搞定一个老板很重视的需求，熬了几个夜终于上线了。</p><p>这周陆续收到用户反馈，说其中一个功能的历史数据没有了，各种投诉就直接过来了。</p><p>在后台一查，原来是新版本完全覆盖了老版本的数据，没有做数据上新老版本兼容，导致更新了新版本的用户看不到之前的老数据。且后台上线后，老版本的用户也看不到之前的数据了。</p><p>这个问题最先被反馈到产品经理这，产品去问测试，测试说已经都测过没问题才发包的。产品去问研发，研发说新版代码里已经做了数据兼容的调整。</p><p>没办法，让研发老大带着下面的人去检查线上代码，发现提交上去的代码中果然没有完成数据兼容。可去发布前的测试代码中一看，这部分代码却存在。</p><p>原来，最后提交代码的程序员没有把这部分代码合并到主分支里面去。</p><p>因为表现层的功能测试都没问题了，且数据代码也写好了，所有人都以为万事俱备，没想到被一个代码提交给搞砸了。</p><p>幸亏数据有备份，经过恢复处理后这才回归了正常。</p><p>原本大家等着靠这个项目拿个季度奖，没想到被队友给坑了，而且是一个本该完全避免的失误。</p><p>所以，产品测试完没问题真不是最后一步。在有条件的团队，一定要做灰度上线，把出问题的概率控制在最低。</p><p>据我了解，微信团队每次更新产品都是逐步灰度放量，一旦遇到问题就立马回滚，非常灵活。</p><p>这些都属于产品技术的基本功，在快速跑需求的同时，也得时刻降低技术负债，多给自己留一些后路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;如果你在工作中碰上那些给你挖坑或者带你踩坑的猪队友，你会怎么办？&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot;
      
    
    </summary>
    
      <category term="codelife" scheme="http://www.devcheng.net/categories/codelife/"/>
    
    
      <category term="职场" scheme="http://www.devcheng.net/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="猪队友" scheme="http://www.devcheng.net/tags/%E7%8C%AA%E9%98%9F%E5%8F%8B/"/>
    
  </entry>
  
</feed>
