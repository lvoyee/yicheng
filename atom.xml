<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伊成个人站-热衷于技术分享，源码分享的个人网站</title>
  
  <subtitle>伊成个人站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.devcheng.net/"/>
  <updated>2022-11-24T02:33:26.367Z</updated>
  <id>http://www.devcheng.net/</id>
  
  <author>
    <name>伊成</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MYSQL中如何调用存储过程</title>
    <link href="http://www.devcheng.net/post/c68e4207.html"/>
    <id>http://www.devcheng.net/post/c68e4207.html</id>
    <published>2022-11-24T02:17:03.000Z</published>
    <updated>2022-11-24T02:33:26.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近公司有一个需求每天晚上定时需要往某个表里面插入一条汇总数据。解决方案有几个，可以通过编写代码添加一个定时任务接口；还有一个则可以利用MYSQL中的定时调度存储过程解决，其实两种方案都可以，这里我选择的是 MYSQL 定时调用 存储过程。</p><h2 id="具体实现过程"><a href="#具体实现过程" class="headerlink" title="具体实现过程"></a>具体实现过程</h2><p>1.先看看定时器的状态，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show VARIABLES LIKE &apos;%sche%&apos;;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20221123174451389.png" alt="image-20221123174451389"></p><p>event_scheduler : OFF 代表没有开启。这里需要执行以下命令开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL event_scheduler = 1;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20221123174821425.png" alt="image-20221123174821425"></p><p>2.编写存储过程，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 存储过程 </span><br><span class="line">CREATE PROCEDURE 存储过程名()</span><br><span class="line"> </span><br><span class="line">BEGIN</span><br><span class="line">   -- 这里编写你的业务逻辑SQL </span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>3.测试写好的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 存储过程名</span><br></pre></td></tr></table></figure><p>4.开启事件，定时调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create event 事件名</span><br><span class="line">on schedule EVERY 1 DAY STARTS &apos;2022-11-10 23:51:00&apos;   -- 执行时间 </span><br><span class="line">do call 存储过程名;</span><br></pre></td></tr></table></figure><p>到此，完整流程就是以上这些了。最后附上我的完整SQL，供参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 查看定时器的状态</span><br><span class="line">show VARIABLES LIKE &apos;%sche%&apos;;</span><br><span class="line"></span><br><span class="line">-- 开启</span><br><span class="line">SET GLOBAL event_scheduler = 1;</span><br><span class="line"></span><br><span class="line">-- 存储过程 </span><br><span class="line">CREATE PROCEDURE saveTownActiveRateSortDataDaily()</span><br><span class="line"> </span><br><span class="line">BEGIN</span><br><span class="line">  set @sumactivenums =(select sum(activenums) from t_table_town_active_rate_sort_data);</span><br><span class="line">  set @sumbicyclenums =(select sum(bicyclenums) from t_table_town_active_rate_sort_data);</span><br><span class="line">  set @cnt = (SELECT DATE_FORMAT(SYSDATE(),&apos;%Y-%m-%d %H:%i:%s&apos;));</span><br><span class="line"></span><br><span class="line">insert into t_table_bicycle_diagram_info(sum_active_num,sum_bicycle_num,insert_date) </span><br><span class="line">VALUES (@sumactivenums, @sumbicyclenums, @cnt);  </span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">-- 调用</span><br><span class="line">call saveTownActiveRateSortDataDaily</span><br><span class="line"></span><br><span class="line">-- 开启事件，定时调用</span><br><span class="line">create event save_data</span><br><span class="line">on schedule EVERY 1 DAY STARTS &apos;2022-11-10 23:51:00&apos;</span><br><span class="line">do call saveTownActiveRateSortDataDaily();</span><br></pre></td></tr></table></figure><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近公司有一个需求每天晚上定时需要往某个表里面插入一条汇总数据。解决方案有几个，可以通过编写代码添加一个定时任务接口；还有一个则可以利用MY
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="MYSQL" scheme="http://www.devcheng.net/tags/MYSQL/"/>
    
      <category term="定时调用存储过程" scheme="http://www.devcheng.net/tags/%E5%AE%9A%E6%97%B6%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于Spring Boot开发的酒店管理系统</title>
    <link href="http://www.devcheng.net/post/cc09a51.html"/>
    <id>http://www.devcheng.net/post/cc09a51.html</id>
    <published>2022-11-22T06:43:51.000Z</published>
    <updated>2022-11-22T06:57:25.764Z</updated>
    
    <content type="html"><![CDATA[<p>本项目是基于Spring Boot 2.x 开发的，酒店管理系统分三种角色：经理（管理员）和员工（普通用户）两种用户， 其中经理（管理员）具有查看所有预定、删除客房、查看员工、添加员工等功能权限 员工（普通用户）具有查看空房、客户预订、修改预订、删除预订、注册新客户等功能权限。</p><p>大体流程如下：</p><p>1.经理（系统管理员）设置客房状态并且设置每晚价格。</p><p>2.客户可以通过员工预定房间，或者自己预定房间，并且可以选择预定时间（包含钟点房）</p><p>3.当客户退房后，通知保洁员进行卫生打扫，保洁员确定卫生情况后，客房重新变为可预定，并且密码重新随机生成</p><p>5.老板可以设置经理，员工，保洁员的工资，根据业绩比例进行分配</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p><strong>预订管理</strong></p><p>添加客房的预订，当客房被预定后，在预订时间到之前均显示不可用。</p><p>删除客人的预订，当客人取消预定,或者到达预定保留时间后，要求取消预定。在前台管理人员确定后,系统将已经预订的房间改为空房。</p><p>更改预定状态，当客人在规定的时间范围内到达，由管理员将客人所定房间的状态改为有人。</p><p><strong>订房管理</strong></p><p>房间查询，查询房间的状态(包括房间是否为空，以及房间的类型)。</p><p>分配房间，根据查询的结果，以及客人的要求，将空房改为占用状态,并确认房间的类型。</p><p>结账，先结账后付钱的客人先记录在系统中，在付钱后将纪录状态改为已经付帐。</p><p>退房等。</p><p><strong>客房管理</strong></p><p>客房退房后，保洁阿姨打扫完房间后可设置已打扫。</p><p><strong>财务管理</strong></p><p>收入和房间数的统计。</p><p><strong>人事管理</strong></p><p>员工信息管理，包括员工工资、提成等</p><h2 id="开发环境（运行环境）"><a href="#开发环境（运行环境）" class="headerlink" title="开发环境（运行环境）"></a><strong>开发环境（运行环境）</strong></h2><ul><li>系统环境：Windows 11</li><li>开发工具：IntelliJ IDEA 2020.3</li><li>Java版本：JDK 1.8</li><li>Mysql版本：5.7</li><li>Maven版本：3.6.3</li></ul><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a><strong>项目技术栈</strong></h2><ul><li>Spring Boot 2.0.X.RELEASE</li><li>Bootstrap</li><li>Maven 3.X</li><li>Mysql</li><li>thymeleaf</li><li>js</li><li>Jquery</li><li>…</li></ul><h2 id="登录地址"><a href="#登录地址" class="headerlink" title="登录地址"></a><strong>登录地址</strong></h2><p>访问路径：<a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a></p><p>管理员账号/密码： admin / admin</p><p>员工账号/密码：<a href="mailto:tom@jiudian.com" target="_blank" rel="noopener">tom@jiudian.com</a>/ 123456</p><p>保洁员账号/密码：<a href="mailto:zhangyi@clean.com" target="_blank" rel="noopener">zhangyi@clean.com</a>/ 123456</p><h2 id="项目演示视频"><a href="#项目演示视频" class="headerlink" title="项目演示视频"></a><strong>项目演示视频</strong></h2><p>链接: <a href="https://pan.baidu.com/s/12qd637UuboPqVMi_1Iyjeg?pwd=m6md" target="_blank" rel="noopener">https://pan.baidu.com/s/12qd637UuboPqVMi_1Iyjeg?pwd=m6md</a> </p><p>提取码: m6md </p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a><strong>项目截图</strong></h2><p><img src="/images/image-20221121144612793.png" alt="image-20221121144612793"></p><p><img src="/images/image-20221121144636594.png" alt="image-20221121144636594"></p><p><img src="/images/image-20221121144650146.png" alt="image-20221121144650146"></p><p><img src="/images/image-20221121144703473.png" alt="image-20221121144703473"></p><p><img src="/images/image-20221121144718469.png" alt="image-20221121144718469"></p><p><img src="/images/image-20221121144828638.png" alt="image-20221121144828638"></p><p><img src="/images/image-20221121144920955.png" alt="image-20221121144920955"></p><h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a><strong>联系我们</strong></h2><p>如有需要源码可以通过QQ 搜索：792435323联系我！<br>请备注：酒店源码</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><p>获取代码之后，使用IDEA导入本项目前，请确保你本地环境是已经含有代码所需要运行环境的条件了。</p><p>接着找到对应的sql文件，将其导入到你本地的数据库即可。</p><p>最后修改项目中配置文件中的数据库对应的信息，确认修改完毕，找到对应的ManageApplication直接运行吧！</p><h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a><strong>其它说明</strong></h2><p>白嫖怪（伸手党）请绕道！</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本项目是基于Spring Boot 2.x 开发的，酒店管理系统分三种角色：经理（管理员）和员工（普通用户）两种用户， 其中经理（管理员）具有查看所有预定、删除客房、查看员工、添加员工等功能权限 员工（普通用户）具有查看空房、客户预订、修改预订、删除预订、注册新客户等功能权
      
    
    </summary>
    
      <category term="codeshare" scheme="http://www.devcheng.net/categories/codeshare/"/>
    
    
      <category term="Spring Boot" scheme="http://www.devcheng.net/tags/Spring-Boot/"/>
    
      <category term="酒店管理系统" scheme="http://www.devcheng.net/tags/%E9%85%92%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot统计接口请求耗时</title>
    <link href="http://www.devcheng.net/post/789179de.html"/>
    <id>http://www.devcheng.net/post/789179de.html</id>
    <published>2022-11-19T12:24:22.000Z</published>
    <updated>2022-11-24T02:20:27.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>接口请求时间的快慢就代表着获取到对应的数据的快慢，也代表着用户请求页面数据的快慢，常常可以借助接口请求快慢进行相应的优化！</p><p>以往我们的做法可能是在每一个接口的方法中的开始添加当前时间，结尾用当前时间减去开始时间就表示该接口的访问时间。</p><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//此处的调用业务代码省略</span></span><br><span class="line">    System.out.println(<span class="string">"访问时间为："</span>+(System.currentTimeMillis()-startTime));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"访问接口成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果有几百个接口的话，每一个接口都需要统计对应的访问时间的话，那就要写几百遍，这很不符合我们的常理，所以有没有一种办法是可以不修改对应的接口方法，并且只需要写一遍就能够应用到所有的接口上面或者指定的接口上面。</p><p>我们第一时间就可以想到AOP技术，AOP是在Spring当中比较常见的技术， AOP就是在不修改原来的代码就可以对接口方法进行增强的作用，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>根据上述，我们需要到AOP,第一个不能少的则是对应的依赖。</p><h2 id="引入对应依赖"><a href="#引入对应依赖" class="headerlink" title="引入对应依赖"></a>引入对应依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--aspectj--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.7.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>统计接口的耗时和访问次数也不需要每一个接口都使用，比如说一些不经常访问的接口就没有统计他的访问次数，所以我们可以自定义一个注解，只要对应的接口方法上应用了这个注解，Spring会进行扫描，并执行对应的统计耗时操作即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计 方法/接口耗时 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> devcheng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CostTime &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义AOP切面"><a href="#定义AOP切面" class="headerlink" title="定义AOP切面"></a>定义AOP切面</h2><p>如果接口方法上应用了自定义的注解，那么就会被Spring扫描到，这里我用的是 @Pointcut 和 @Around 配合使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计 方法/接口耗时 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> devcheng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CostTimeAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(value = <span class="string">"@annotation(net.devcheng.www.data.annotation.CostTime)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">costTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"costTime()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">costTimeAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">            obj = joinPoint.proceed();</span><br><span class="line">            <span class="comment">//获取方法名称</span></span><br><span class="line">            String method = joinPoint.getSignature().getName();</span><br><span class="line">            <span class="comment">//获取类名称</span></span><br><span class="line">            String className=joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">            <span class="comment">//计算耗时</span></span><br><span class="line">            <span class="keyword">long</span> cost = System.currentTimeMillis() - beginTime;</span><br><span class="line">            log.error(<span class="string">"类:[&#123;&#125;]，方法:[&#123;&#125;] 接口耗时:[&#123;&#125;]"</span>, className,method, cost + <span class="string">"毫秒"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="用在统计接口上"><a href="#用在统计接口上" class="headerlink" title="用在统计接口上"></a>用在统计接口上</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/V4/getSignsPredictDetail"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@CostTime</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSignsPredictDetail</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cityBrain4Service.getSignsPredictDetailByName(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用在统计定时任务上"><a href="#用在统计定时任务上" class="headerlink" title="用在统计定时任务上"></a>用在统计定时任务上</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"55 */5 * * * ?"</span>)</span><br><span class="line"><span class="meta">@CostTime</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scenesSignTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行输出"><a href="#运行输出" class="headerlink" title="运行输出"></a>运行输出</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2022-11-18 10:31:51.523 [http-nio-8886-exec-8] ERROR net.devcheng.www.data.config.CostTimeAspect Line:32  - 类:[net.devcheng.www.data.controller.SpecialInterfaceController]，方法:[getWeather] 接口耗时:[0毫秒]</span><br><span class="line">2022-11-18 10:31:52.122 [http-nio-8886-exec-9] ERROR net.devcheng.www.data.config.CostTimeAspect Line:32  - 类:[net.devcheng.www.data.controller.SpecialInterfaceController]，方法:[getWeather] 接口耗时:[1毫秒]</span><br><span class="line">2022-11-18 10:31:55.073 [http-nio-8886-exec-15] ERROR net.devcheng.www.data.config.CostTimeAspect Line:32  - 类:[net.devcheng.www.data.controller.CityBrain4Controller]，方法:[getScrollingMessages] 接口耗时:[2毫秒]</span><br><span class="line">2022-11-18 10:31:55.076 [http-nio-8886-exec-3] ERROR net.devcheng.www.data.config.CostTimeAspect Line:32  - 类:[net.devcheng.www.data.controller.SpecialInterfaceController]，方法:[getWeather] 接口耗时:[1毫秒]</span><br></pre></td></tr></table></figure><hr><p>The end</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;接口请求时间的快慢就代表着获取到对应的数据的快慢，也代表着用户请求页面数据的快慢，常常可以借助接口请求快慢进行相应的优化！&lt;
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="SpringBoot" scheme="http://www.devcheng.net/tags/SpringBoot/"/>
    
      <category term="接口耗时统计" scheme="http://www.devcheng.net/tags/%E6%8E%A5%E5%8F%A3%E8%80%97%E6%97%B6%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>努力做一个“不要脸”的人</title>
    <link href="http://www.devcheng.net/post/633a5847.html"/>
    <id>http://www.devcheng.net/post/633a5847.html</id>
    <published>2022-09-04T07:16:49.000Z</published>
    <updated>2022-09-04T07:29:05.526Z</updated>
    
    <content type="html"><![CDATA[<p>“你的脸还在脸上，有的人脸能放在兜里，有的人脸能撂在地下。”</p><p>这是我给一个小兄弟的建议：出来混，别太把脸当回事。当你放下面子去搞钱的时候，说明你成熟了；当你用钱挣回面子的时候，说明你成长了。</p><h2 id="“不要脸”是一种境界"><a href="#“不要脸”是一种境界" class="headerlink" title="“不要脸”是一种境界"></a>“不要脸”是一种境界</h2><p>人生的三种境界：第一，太要脸；第二，脸皮厚；第三，不要脸。</p><p>本文聊的不要脸，并非不知羞耻，指的是放下你的面子。面子是不能当饭吃的，这个世界上最不值钱的，就是所谓的面子。</p><p>比尔盖茨在一次大学毕业典礼上，讲过这样一句话：“这个世界不会在乎你的自尊，你必须先有所成就，然后再去强调自己的感受。”</p><p>乔布斯生前也说过一句很著名的话：“我特别喜欢和聪明人在一起工作，因为最大的好处是不用考虑他们的尊严。”</p><p>面子是无能者维护自己的盾牌。</p><p>你见没见过有的人明明知道自己错了，为了面子他就是死活不承认。</p><p>聪明人更关注自己的成长，他会保持开放的心态，而不是捍卫自己的面子，不是过度的自我防卫，想方设法证明“我没错”。</p><p>做到“不要脸”其实不容易，你必须内心极其强大。内心的强大来自于什么？是你的实力。只有没本事的人才会处处在乎面子，只有弱者才在乎面子，强者都活成了里子。</p><h2 id="面对批评的正确姿势"><a href="#面对批评的正确姿势" class="headerlink" title="面对批评的正确姿势"></a>面对批评的正确姿势</h2><p>闻过则喜，永远感谢愿意花时间在你身上的人。</p><p>有的人被批评了，像刺猬似的缩成一团竖起硬刺，“这不是我的错”；有的人被批评了，像鸵鸟一样把头钻进沙堆，“这和我没关系”；有的人被批评了，像寒风中哆哆嗦嗦的鹌鹑，“我也好可怜啊”；还有的人使出金蝉脱壳大法，“谁谁谁犯的错比我还大”，或是指东打西来找补，“我还干了很多好事呢”……</p><p>一味在意对方的态度，在乎自己的感受，就容易忘了事情的根本：别人为什么批评你？</p><p>一个比你更强的人批评你，你要明白一点：牛人没时间攻击你，也没时间浪费在一个他认为没有价值的人身上。牛人之所以批评你，是认为你还有潜力，他在帮助你成长。</p><p>面对批评，输球不要输姿势，你的心态应该是：把“为什么受伤的总是我”，变成“我能从这件事上学到什么”。</p><p>如果你觉得批评是一种刁难，一开始就输了；如果你觉得批评是一种雕刻，迟早都会赢的。</p><p>哪怕别人批评时严厉了点，甚至苛刻了些，你要做的不是愤怒、不是羞愧、不是执念于“我的面子啪叽掉地下了”的狭隘。错了咱就认，认了咱就改，改了就不再犯。</p><p>别人批评你不是坏事。就像情侣吵架，有的吵就挺好，说明还期望对方会改变，因为在意所以争吵，如果有一天不吵了，就是要分手了。褒贬是买主，喝彩是闲人。如果有一天老板都懒得批评你了，说明他已经放弃了。</p><h2 id="丑闻是成功者的奖励"><a href="#丑闻是成功者的奖励" class="headerlink" title="丑闻是成功者的奖励"></a>丑闻是成功者的奖励</h2><p>难听的大实话：真比你强很多的人，根本没空搭理你。</p><p>一位创业的朋友有点小郁闷，他的同行四处造谣他和公司的女性高管有事。</p><p>我和他说你应该高兴，这说明你在圈子里已经有一号了，这是一种变相的认可。你的面子不是撂地下了，是被竞争对手供起来了。如果你公司干得稀碎，同行都不带正眼瞧你的。</p><p>当一个人有了丑闻，他一定达到了相当的高度。</p><p>人们不会去毒舌一个毫无建树的人。一旦你有所成就，你的竞争对手就会乐于制造你的丑闻，而吃瓜群众也乐于把你的丑闻当做谈资，尤其是男女关系这种下三滥的东西。</p><p>没必要把别人的造谣中伤当回事，你对待丑闻的态度，决定了你职业发展的高度。</p><p>以前我写一本书，发现盗版，我会郁闷；现在我写一本书，发现盗版，我很开心。因为，这也算是一种变相的认可，多少书首印都卖不掉，盗版的人都不稀罕去盗版。</p><p>雷霆雨露，蜚短流长，俱是天恩。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>如果你想干成点什么事，给你三条建议：第一，坚持；第二，不要脸；第三，坚持不要脸！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“你的脸还在脸上，有的人脸能放在兜里，有的人脸能撂在地下。”&lt;/p&gt;
&lt;p&gt;这是我给一个小兄弟的建议：出来混，别太把脸当回事。当你放下面子去搞钱的时候，说明你成熟了；当你用钱挣回面子的时候，说明你成长了。&lt;/p&gt;
&lt;h2 id=&quot;“不要脸”是一种境界&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="codelife" scheme="http://www.devcheng.net/categories/codelife/"/>
    
    
      <category term="职场" scheme="http://www.devcheng.net/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="程序人生" scheme="http://www.devcheng.net/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringBoot开发的家庭财务管理系统</title>
    <link href="http://www.devcheng.net/post/fb09f6bd.html"/>
    <id>http://www.devcheng.net/post/fb09f6bd.html</id>
    <published>2022-07-08T07:12:55.000Z</published>
    <updated>2022-07-08T07:19:05.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>本项目是基于Spring Boot 2.x 开发的，家庭财务管理系统分三种角色，分别是：系统管理员，家主，用户。本项目可以当作毕业设计也有对应的毕业论文可参考<strong>(毕业论文不是免费的)</strong>，期末课程作业等，也可以当作学习、进阶Spring Boot 的资料。</p><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a><strong>功能描述</strong></h2><p>本项目通过不同的角色登录显示不同角色对应的菜单，不用角色之间查看到对应的功能菜单数据。其中系统管理员拥有系统所有菜单和功能，其次是家主，家主下拥有的是用户。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a><strong>主要功能</strong></h2><ul><li>收支管理（支出详情，收入详情）</li><li>理财管理（活期资产，理财详情，负债详情，理财产品）</li><li>财务统计（统计报表）</li><li>系统管理（用户管理，角色管理）</li><li>我的主页</li><li>安全退出</li><li>修改密码</li></ul><h2 id="开发环境（运行环境）"><a href="#开发环境（运行环境）" class="headerlink" title="开发环境（运行环境）"></a><strong>开发环境（运行环境）</strong></h2><ul><li>系统环境：Windows 11</li><li>开发工具：IntelliJ IDEA 2020.3</li><li>Java版本：JDK 1.8</li><li>Mysql版本：5.7</li><li>Maven版本：3.6.3</li></ul><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a><strong>项目技术栈</strong></h2><ul><li>Spring Boot 2.1.X.RELEASE</li><li>Spring Boot JPA</li><li>Maven 3.X</li><li>Mysql</li><li>thymeleaf</li><li>layui</li><li>Jquery</li><li>…</li></ul><h2 id="登录地址"><a href="#登录地址" class="headerlink" title="登录地址"></a><strong>登录地址</strong></h2><p>访问路径：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p>管理员账号/密码： admin / admin</p><p>家主账号/密码：house1 / 123456</p><p>用户账号/密码：yangtwo / 123456</p><h2 id="项目演示视频"><a href="#项目演示视频" class="headerlink" title="项目演示视频"></a><strong>项目演示视频</strong></h2><p>视频链接：</p><p>链接: <a href="https://pan.baidu.com/s/1ttuRq_9vkfjq320MarTFIA?pwd=fptq" target="_blank" rel="noopener">https://pan.baidu.com/s/1ttuRq_9vkfjq320MarTFIA?pwd=fptq</a></p><p>提取码: fptq</p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a><strong>项目截图</strong></h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/12498/1656984558090/847c9e0de7f946628c0966831500d8ba.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/12498/1656984558090/b50b753aaed748ebaae5596290ebdd36.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/12498/1656984558090/b18206992bb448c099ee608fcd60c523.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/12498/1656984558090/a602946b21d642c5a94c3c32bf7de941.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/12498/1656984558090/293b76a7a9e6476f8f7f5a39a5bfdd65.png" alt="image.png"></p><h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a><strong>联系我们</strong></h2><p>如有需要源码可以通过QQ 搜索：792435323联系我！<br>请备注：源码</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><p>获取代码之后，使用IDEA导入本项目前，请确保你本地环境是已经含有代码所需要运行环境的条件了。</p><p>接着找到对应的sql文件，将其导入到你本地的数据库即可。</p><p>最后修改项目中配置文件中的数据库对应的信息，确认修改完毕，找到对应的FfmsApplication直接运行吧！</p><h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a><strong>其它说明</strong></h2><p>白嫖怪（伸手党）请绕道！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本项目是基于Spring Boot 2.x 开发的，家庭财务管理系统分三种角色，分别是：系统管理员，家主，
      
    
    </summary>
    
      <category term="codeshare" scheme="http://www.devcheng.net/categories/codeshare/"/>
    
    
      <category term="SpringBoot" scheme="http://www.devcheng.net/tags/SpringBoot/"/>
    
      <category term="家庭财务管理系统" scheme="http://www.devcheng.net/tags/%E5%AE%B6%E5%BA%AD%E8%B4%A2%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>解决github无法访问的方法之修改hosts文件</title>
    <link href="http://www.devcheng.net/post/768a5c50.html"/>
    <id>http://www.devcheng.net/post/768a5c50.html</id>
    <published>2022-06-17T03:23:41.000Z</published>
    <updated>2022-08-18T04:25:19.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>github有的朋友访问不了，今天就介绍一种解决方法。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>根据修改hosts文件，配置github 对应ip从而达到可以访问github的目的，所以前提条件需要可以修改hosts文件。</p><p>hosts文件路径： C:\Windows\System32\drivers\etc</p><p>假如你无法修改对应的这个hosts文件，请移步百度一波先解决这个问题。</p><p>1.输入网站 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> </p><p>2.按照下列清单在以上网站输入对于网址，得到的对应IP写入hosts文件即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">github.global.ssl.fastly.net</span><br><span class="line">github.com</span><br><span class="line">assets-cdn.github.com</span><br><span class="line">documentcloud.github.com</span><br><span class="line">gist.github.com</span><br><span class="line">help.github.com</span><br><span class="line">nodeload.github.com</span><br><span class="line">raw.github.com</span><br><span class="line">status.github.com</span><br><span class="line">training.github.com</span><br><span class="line">www.github.com</span><br><span class="line">avatars0.githubusercontent.com</span><br><span class="line">avatars1.githubusercontent.com</span><br><span class="line">codeload.github.com</span><br></pre></td></tr></table></figure></p><p>如果你嫌麻烦你可以直接复制下面的内容到你的hosts文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">146.75.77.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.113.4 github.com</span><br><span class="line">185.199.109.153 assets-cdn.github.com</span><br><span class="line">185.199.109.153 documentcloud.github.com</span><br><span class="line">140.82.114.3 gist.github.com</span><br><span class="line">140.82.112.17 help.github.com</span><br><span class="line">140.82.112.10 nodeload.github.com</span><br><span class="line">185.199.108.133 raw.github.com</span><br><span class="line">140.82.114.18 status.github.com</span><br><span class="line">185.199.108.153 training.github.com</span><br><span class="line">140.82.113.4 www.github.com</span><br><span class="line">185.199.108.133 avatars0.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars1.githubusercontent.com</span><br><span class="line">140.82.114.9 codeload.github.com</span><br></pre></td></tr></table></figure><p>如果发现哪一天，这个不可用了，可以留言评论告知我！</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;github有的朋友访问不了，今天就介绍一种解决方法。&lt;/p&gt;
&lt;h1 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; 
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="github无法访问" scheme="http://www.devcheng.net/tags/github%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>如何将 swagger接口导出成PDF、markdown</title>
    <link href="http://www.devcheng.net/post/76a1c264.html"/>
    <id>http://www.devcheng.net/post/76a1c264.html</id>
    <published>2022-06-15T05:05:15.000Z</published>
    <updated>2022-06-15T05:26:05.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>swagger提供了UI页面，假如需要给合作伙伴对应的开发者，一般都需要提供一份接口PDF文件或是对应的markdown文件，这个时候就需要将对应swagger接口进行导出操作了。</p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><h2 id="第一步：准备swagger-json文件"><a href="#第一步：准备swagger-json文件" class="headerlink" title="第一步：准备swagger json文件"></a>第一步：准备swagger json文件</h2><p>1.打开 swagger ui 的页面</p><p>2.点击 swagger json 的链接，具体如下图：<br><img src="/images/微信截图_20220614123402_001.png" alt="“伊成博客”"></p><p>tips：如果你没有看到这个链接，使用F12打开开发者工具重新刷新后，复制 api-docs 的响应内容。</p><p>一定要保存成 json 文件。</p><h2 id="第二步：-把swagger-json文件导入-docway"><a href="#第二步：-把swagger-json文件导入-docway" class="headerlink" title="第二步： 把swagger json文件导入 docway"></a>第二步： 把swagger json文件导入 docway</h2><p>1.登录 <a href="http://docway.net" target="_blank" rel="noopener">http://docway.net</a> （如果第一次使用，需要注册）</p><p>2.在控制台中，新增项目，选择 导入<br><img src="/images/微信截图_20220614123402_002.png" alt="“伊成博客”"></p><p>3.选择 swagger 导入，并根据自己的 swagger json 选择是“上传文件方式”还是“粘贴json方式”<br><img src="/images/微信截图_20220614123402_003.png" alt="“伊成博客”"></p><p>4.导入成功后，就可以看到对应的信息了<br><img src="/images/微信截图_20220614123402_004.png" alt="“伊成博客”"></p><h2 id="第三步：导出PDF或markdown"><a href="#第三步：导出PDF或markdown" class="headerlink" title="第三步：导出PDF或markdown"></a>第三步：导出PDF或markdown</h2><p>1.在项目的“更多设置”中，找到“项目导出”功能。可以选择 PDF或Markdown 导出即可<br><img src="/images/微信截图_20220614123402_005.png" alt="“伊成博客”"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>总体来说docway导出的PDF接口文件还是不错的，如果选择 PDF(浏览器版)对应的接口文件则是带有颜色的。如果选择的是 仅仅 PDF生成的接口文件页脚是带有docway的网站链接的。</p><p>docway除了 PDF、markdown 导出， 还支持接口设计、接口分享、接口mock、接口历史记录、接口版本管理、团队管理等功能。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;swagger提供了UI页面，假如需要给合作伙伴对应的开发者，一般都需要提供一份接口PDF文件或是对应的markdown文件
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="swagger2" scheme="http://www.devcheng.net/tags/swagger2/"/>
    
      <category term="导出PDF" scheme="http://www.devcheng.net/tags/%E5%AF%BC%E5%87%BAPDF/"/>
    
  </entry>
  
  <entry>
    <title>分享一个Joda-Time日期时间工具类</title>
    <link href="http://www.devcheng.net/post/33ca8774.html"/>
    <id>http://www.devcheng.net/post/33ca8774.html</id>
    <published>2022-05-28T02:33:33.000Z</published>
    <updated>2022-05-28T02:44:04.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在JDK1.8之前，处理日期和时间的方式比较单一，Java中提供了Calendar来处理日期，但是过程较为繁琐。<br>但是在JDK1.8之后，Java更新了time包提供了LocalDate,LocalTime,LocalDateTime等日期时间类来处理较为复杂的关于日期和时间的业务逻辑的方法。</p><p>现在介绍Joda-Time日期时间工具类，该类库的开发者参与了JDK1.8中time包的开发，所以在那些使用JDK1.8之前的项目，Joda-Time是一个不错的选择。而在JDK1.8之后，该工具类也是值得推荐使用的，其原因在于高效和安全。</p><h2 id="完整代码展示"><a href="#完整代码展示" class="headerlink" title="完整代码展示"></a>完整代码展示</h2><p>引入必要的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/joda-time/joda-time --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Joda-Time工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.h.util.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTimeZone;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.Days;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 时间工具类</span></span><br><span class="line"><span class="comment"> * Joda-Time提供了一组Java类包用于处理包括ISO8601标准在内的date和time.</span></span><br><span class="line"><span class="comment"> * 可以利用它把JDK Date和Calendar类完全替换掉，而且仍然能够提供很好的集成.</span></span><br><span class="line"><span class="comment"> * 尤其对时间的加减处理起来特别方便,快速.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SECOND = <span class="number">1000</span>;           <span class="comment">//1秒,毫秒为单位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MINUTE = SECOND * <span class="number">60</span>;   <span class="comment">//一分钟</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> HOUR = MINUTE * <span class="number">60</span>;    <span class="comment">// 一小时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DAY= HOUR * <span class="number">24</span>;       <span class="comment">//一天</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> WEEK = DAY * <span class="number">7</span>;      <span class="comment">//一周</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> YEAR = DAY * <span class="number">365</span>;   <span class="comment">//一年</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORMAT_TIME = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;      <span class="comment">//默认时间格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORMAT_TIME_MINUTE = <span class="string">"yyyy-MM-dd HH:mm"</span>; <span class="comment">//默认时间格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORTER_DATE = <span class="string">"yyyy-MM-dd"</span>;             <span class="comment">//默认日</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前系统时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentTimePattern(FORMAT_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取系统当前时间按照指定格式返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern  yyyy/MM/dd hh:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentTimePattern</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        DateTime dt = <span class="keyword">new</span> DateTime();</span><br><span class="line">        String time = dt.toString(pattern);</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照时区转换时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeZone 时区</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parrten</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date, TimeZone timeZone, String parrten)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(parrten);</span><br><span class="line">        sdf.setTimeZone(timeZone);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期是星期几</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentWeek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getWeek(<span class="keyword">new</span> DateTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month 月</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day 天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hour 小时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minute 分钟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPointTime</span><span class="params">(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPointTimePattern(year,month,day,hour,minute,seconds,FORMAT_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month 月</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day 天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hour 小时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minute 分钟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parrten 自定义格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> parrten</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPointTimePattern</span><span class="params">(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer seconds, String parrten)</span> </span>&#123;</span><br><span class="line">        DateTime dt = <span class="keyword">new</span> DateTime(year, month, day, hour, minute, seconds);</span><br><span class="line">        String date = dt.toString(parrten);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPointDate</span><span class="params">(Integer year, Integer month, Integer day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPointDatParrten(year,month,day,FORTER_DATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定日期 返回指定格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parrten</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPointDatParrten</span><span class="params">(Integer year, Integer month, Integer day, String parrten)</span> </span>&#123;</span><br><span class="line">        LocalDate dt = <span class="keyword">new</span> LocalDate(year, month, day);</span><br><span class="line">        String date = dt.toString(parrten);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定时间是一周的星期几</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWeekPoint</span><span class="params">(Integer year, Integer month, Integer day)</span> </span>&#123;</span><br><span class="line">        LocalDate dts = <span class="keyword">new</span> LocalDate(year, month, day);</span><br><span class="line">        <span class="keyword">return</span> getWeek(dts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定日期是星期几</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如星期一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWeek</span><span class="params">(LocalDate dts)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WeekEnum.getDesc(dts.getDayOfWeek());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定日期是星期几</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如星期一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWeek</span><span class="params">(DateTime dts)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WeekEnum.getDesc(dts.getDayOfWeek());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> format(date,FORMAT_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化日期字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 日期格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">        <span class="keyword">return</span> format.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析日期yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 日期字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> parse(date,FORMAT_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 日期字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 日期格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String date, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Date resultDate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultDate = <span class="keyword">new</span> SimpleDateFormat(pattern).parse(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"日期解析错误!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析日期 yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Long timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> format(timestamp,FORMAT_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析日期 yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Long timestamp, String pattern)</span> </span>&#123;</span><br><span class="line">        String dateStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == timestamp || timestamp.longValue() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dateStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = <span class="keyword">new</span> Date(timestamp);</span><br><span class="line">            SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">            dateStr = format.format(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dateStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取当前时间前几天时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> days</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">forwardDay</span><span class="params">(<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">        DateTime dt = <span class="keyword">new</span> DateTime();</span><br><span class="line">        DateTime y = dt.minusDays(days);</span><br><span class="line">        <span class="keyword">return</span> y.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取当前时间前几天时间,按指定格式返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> days</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">forwardDay</span><span class="params">(<span class="keyword">int</span> days, String format)</span> </span>&#123;</span><br><span class="line">        DateTime dt = <span class="keyword">new</span> DateTime();</span><br><span class="line">        DateTime y = dt.minusDays(days);</span><br><span class="line">        <span class="keyword">return</span> y.toString(format);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">forwardDay</span><span class="params">(Date date,Integer days)</span></span>&#123;</span><br><span class="line">        DateTime dt = <span class="keyword">new</span> DateTime(date);</span><br><span class="line">        DateTime y = dt.minusDays(days);</span><br><span class="line">        <span class="keyword">return</span> y.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">forwardDay</span><span class="params">(Date date,Integer days,String format)</span></span>&#123;</span><br><span class="line">        DateTime dt = <span class="keyword">new</span> DateTime(date);</span><br><span class="line">        DateTime y = dt.minusDays(days);</span><br><span class="line">        <span class="keyword">return</span> y.toString(format);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定时间之后或者之前的某一天00:00:00 默认返回当天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> days</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">day00</span><span class="params">(Integer days, String date, String zimeZone)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        DateTime dt;</span><br><span class="line">        TimeZone timeZone;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(zimeZone)) &#123;</span><br><span class="line">                timeZone = TimeZone.getDefault();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                timeZone = TimeZone.getTimeZone(zimeZone);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(date)) &#123;</span><br><span class="line">                dt = <span class="keyword">new</span> DateTime().withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dt = <span class="keyword">new</span> DateTime(date).withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Throwable(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DateTime y = dt.minusDays(days).withHourOfDay(<span class="number">0</span>).withMinuteOfHour(<span class="number">0</span>).withSecondOfMinute(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> y.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取指定时间之后或者之前的某一天23:59:59 默认返回当天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> days 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">day59</span><span class="params">(Integer days, String date, String zimeZone)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        DateTime dt;</span><br><span class="line">        TimeZone timeZone;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(zimeZone)) &#123;</span><br><span class="line">                timeZone = TimeZone.getDefault();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                timeZone = TimeZone.getTimeZone(zimeZone);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(date)) &#123;</span><br><span class="line"></span><br><span class="line">                dt = <span class="keyword">new</span> DateTime().withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dt = <span class="keyword">new</span> DateTime(date).withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Throwable(e);</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime y = dt.minusDays(days).withHourOfDay(<span class="number">23</span>).withMinuteOfHour(<span class="number">59</span>).withSecondOfMinute(<span class="number">59</span>);</span><br><span class="line">        <span class="keyword">return</span> y.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个时间相差多少天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">diffDay</span><span class="params">(Date startDate, Date endDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (startDate == <span class="keyword">null</span> || endDate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime dt1 = <span class="keyword">new</span> DateTime(startDate);</span><br><span class="line">        DateTime dt2 = <span class="keyword">new</span> DateTime(endDate);</span><br><span class="line">        <span class="keyword">int</span> day = Days.daysBetween(dt1, dt2).getDays();</span><br><span class="line">        <span class="keyword">return</span> Math.abs(day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某月之前,之后某一个月最后一天,24:59:59</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">lastDay</span><span class="params">(Date date, Integer month)</span> </span>&#123;</span><br><span class="line">        DateTime dt1;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="keyword">null</span>) &#123;</span><br><span class="line">            month = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dt1 = <span class="keyword">new</span> DateTime().minusMonths(month);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dt1 = <span class="keyword">new</span> DateTime(date).minusMonths(month);</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime lastDay = dt1.dayOfMonth().withMaximumValue().</span><br><span class="line">                withHourOfDay(<span class="number">23</span>).withMinuteOfHour(<span class="number">59</span>).withSecondOfMinute(<span class="number">59</span>);</span><br><span class="line">        <span class="keyword">return</span> lastDay.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取某月月之前,之后某一个月第一天,00:00:00</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">firstDay</span><span class="params">(Date date, Integer month)</span> </span>&#123;</span><br><span class="line">        DateTime dt1;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="keyword">null</span>) &#123;</span><br><span class="line">            month = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dt1 = <span class="keyword">new</span> DateTime().minusMonths(month);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dt1 = <span class="keyword">new</span> DateTime(date).minusMonths(month);</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime lastDay = dt1.dayOfMonth().withMinimumValue().</span><br><span class="line">                withHourOfDay(<span class="number">0</span>).withMinuteOfHour(<span class="number">0</span>).withSecondOfMinute(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> lastDay.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">addDay</span><span class="params">(Date date, <span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line">        DateTime dt1;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dt1 = <span class="keyword">new</span> DateTime().plusDays(offset);</span><br><span class="line">            <span class="keyword">return</span> dt1.toDate();</span><br><span class="line">        &#125;</span><br><span class="line">        dt1 = <span class="keyword">new</span> DateTime(date).plusDays(offset);</span><br><span class="line">        <span class="keyword">return</span> dt1.toDate();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入日期时间与当前系统日期时间的比较,</span></span><br><span class="line"><span class="comment">     * 若日期相同，则根据时分秒来返回 ,</span></span><br><span class="line"><span class="comment">     * 否则返回具体日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 日期或者 xx小时前||xx分钟前||xx秒前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNewUpdateDateString</span><span class="params">(Date now, Date createDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (now == <span class="keyword">null</span> || createDate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Long time = (now.getTime() - createDate.getTime());</span><br><span class="line">        <span class="keyword">if</span> (time &gt; (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> time / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) + <span class="string">"天前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &gt; (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> time / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) + <span class="string">"小时前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &gt; (<span class="number">60</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> time / (<span class="number">60</span> * <span class="number">1000</span>) + <span class="string">"分钟前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> time / <span class="number">1000</span> + <span class="string">"秒前"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"刚刚"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> WeekEnum&#123;</span><br><span class="line">        MONDAY(<span class="number">1</span>,<span class="string">"星期一"</span>),</span><br><span class="line">        TUESDAY(<span class="number">2</span>,<span class="string">"星期二"</span>),</span><br><span class="line">        WEDNESDAY(<span class="number">3</span>,<span class="string">"星期三"</span>),</span><br><span class="line">        THURSDAY(<span class="number">4</span>,<span class="string">"星期四"</span>),</span><br><span class="line">        FRIDAY(<span class="number">5</span>,<span class="string">"星期五"</span>),</span><br><span class="line">        SATURDAY(<span class="number">6</span>,<span class="string">"星期六"</span>),</span><br><span class="line">        SUNDAY(<span class="number">7</span>,<span class="string">"星期日"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">        WeekEnum(<span class="keyword">int</span> index, String desc) &#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">            <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDesc</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">            String desc = <span class="string">""</span>;</span><br><span class="line">            WeekEnum[] values = WeekEnum.values();</span><br><span class="line">            <span class="keyword">for</span> (WeekEnum weekEnum:values)&#123;</span><br><span class="line">                <span class="keyword">if</span> (weekEnum.index == index)&#123;</span><br><span class="line">                    desc = weekEnum.desc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在JDK1.8之前，处理日期和时间的方式比较单一，Java中提供了Calendar来处理日期，但是过程较为繁琐。&lt;br&gt;但是
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="Joda-Time" scheme="http://www.devcheng.net/tags/Joda-Time/"/>
    
      <category term="日期时间工具类" scheme="http://www.devcheng.net/tags/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>MindManager2018试用期过后破解使用</title>
    <link href="http://www.devcheng.net/post/a39ed45b.html"/>
    <id>http://www.devcheng.net/post/a39ed45b.html</id>
    <published>2022-05-12T12:28:35.000Z</published>
    <updated>2022-05-12T12:50:25.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间无意入坑 MindManager 2018 ，可以免费体验一个月没来的及用几次一个月就过去了，再次打开就提示 “你的30天评估期已结束” 。瞬间觉得失去了几百万，急得直拍大腿啊，无奈从网上找到了破解之法，遂记录一下。（还是得说一句违心的话，如果你是土豪就买正版支持一下吧。）</p><p><img src="/images/微信截图_20220512163726.png" alt="“伊成博客”"></p><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><h3 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a><strong>步骤一：</strong></h3><p>根据路径：C:\Users\<font color="red">xxx</font>\AppData\Roaming\MindManager\MindManager2018.ini<br>找到MindManager2018.ini文件，使用任意编辑器打开。</p><p><font color="red">tips:</font> C:\Users\xxx 这里的 xxx 每个人的都不一样的 替换成自己的哦！</p><p>MindManager2018.ini<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[MindManager]</span><br><span class="line">InstallTime=1537004338</span><br><span class="line">LastLoading=1537004338</span><br></pre></td></tr></table></figure></p><p>InstallTime代表安装时间，LastLoading记录最后一次启动时间。</p><h3 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a><strong>步骤二：</strong></h3><p>使用 win+R 接着输入 regedit ，找到路径<br>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Mindjet\MindManager\18\Installer</p><p><img src="/images/微信截图_20220512200639.png" alt="“伊成博客”"></p><p>找到项Install，修改里面的InstallTime的值。<br>记住修改的这个时间，接着 可以使用计算时间戳的<a href="https://tool.lu/timestamp/" target="_blank" rel="noopener">网址</a></p><p><img src="/images/微信截图_20220512201019.png" alt="“伊成博客”"></p><p>使用在线计算时间戳的网站 ，把转换后的时间戳复制到 MindManager2018.ini 文件中的InstallTime中，保存重新打开MindManager即可。</p><h2 id="小小的总结"><a href="#小小的总结" class="headerlink" title="小小的总结"></a>小小的总结</h2><p>以上的方法也不是完全之策，修改之后也是只能使用30天，到时间后还是会提示30天评估期结束的话语，如果你不嫌弃这样的方法，可以继续使用这个方法。如果家中有矿，正好你也喜欢拿就可以使用 钞能力 解决！</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前段时间无意入坑 MindManager 2018 ，可以免费体验一个月没来的及用几次一个月就过去了，再次打开就提示 “你的
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="MindManager2018" scheme="http://www.devcheng.net/tags/MindManager2018/"/>
    
      <category term="过期破解" scheme="http://www.devcheng.net/tags/%E8%BF%87%E6%9C%9F%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>面试题：int(1)和int(10)有区别吗</title>
    <link href="http://www.devcheng.net/post/9ada137e.html"/>
    <id>http://www.devcheng.net/post/9ada137e.html</id>
    <published>2022-04-30T06:17:58.000Z</published>
    <updated>2022-04-30T06:28:57.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先给答案"><a href="#先给答案" class="headerlink" title="先给答案"></a>先给答案</h2><p>int(1)和int(10)有区别吗？</p><p><strong>没有区别</strong></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作中不乏见过定义各种类型像varchar(4),char(2)等,里面的数字一般指的是字符长度。所以很多人也会觉得int(1)里面只能存1位数，殊不知是理解错了。下面具体讲解一下！</p><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>INT[(M)] [UNSIGNED] [ZEROFILL]</p><ul><li><p>普通大小的整数。</p></li><li><p>带符号的范围是-2147483648到2147483647</p></li><li><p>无符号的范围是0到4294967295。</p></li></ul><p>INT(1) 和 INT(10)本身没有区别，但是加上(M)值后，会有显示宽度的设置。</p><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span>(<span class="number">1234</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| id   |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|   12 |</span><br><span class="line">| 1234 |</span><br><span class="line">+<span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>从这个测试可以看出定义的id int(3)是可以存下1234的，接着带上ZEROFILL做测试。</p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><p>和测试1一样创建一个表，也是定义id int(3) 带上zerofill，测试结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table test1(id int(3) zerofill);</span><br><span class="line">Query OK, 0 rows affected (0.52 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test1 value(12);</span><br><span class="line">Query OK, 1 row affected (0.15 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test1 value(1234);</span><br><span class="line">Query OK, 1 row affected (0.16 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test1 value(666666);</span><br><span class="line">Query OK, 1 row affected (0.14 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test1;</span><br><span class="line">+--------+</span><br><span class="line">| id     |</span><br><span class="line">+--------+</span><br><span class="line">|    012 | # 这个地方不够三位宽度会自动补零</span><br><span class="line">|   1234 |</span><br><span class="line">| 666666 |</span><br><span class="line">+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h3><p>利用 test表（不带zerofill）和 test1表（带zerofill） 测试插入负数看看。</p><p>test表(可以正常存进去)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into test value(-1234);</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test;</span><br><span class="line">+-------+</span><br><span class="line">| id    |</span><br><span class="line">+-------+</span><br><span class="line">|    12 |</span><br><span class="line">|  1234 |</span><br><span class="line">| -1234 |</span><br><span class="line">+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>test1表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  insert into test1 value(-1234);</span><br><span class="line">ERROR 1264 (22003): Out of range value for column &apos;id&apos; at row 1</span><br></pre></td></tr></table></figure><p>从这个测试可以发现添加zerofill的时候，无法添加负数到表里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  insert into test1 value(0);</span><br><span class="line">Query OK, 1 row affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test1;</span><br><span class="line">+--------+</span><br><span class="line">| id     |</span><br><span class="line">+--------+</span><br><span class="line">|    012 |</span><br><span class="line">|   1234 |</span><br><span class="line">| 666666 |</span><br><span class="line">|    000 |</span><br><span class="line">+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上测试中用到的 zerofill 翻译过来就是 零填充。</p><p>int后面的数字不能表示字段的长度，int(num)一般加上zerofill，才有效果。zerofill的作用一般可以用在一些编号相关的数字中，比如学生的编号 001 002 … 999这种，如果mysql没有零填充的功能，但是你又要格式化输出等长的数字编号时，那么你只能自己处理了。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;先给答案&quot;&gt;&lt;a href=&quot;#先给答案&quot; class=&quot;headerlink&quot; title=&quot;先给答案&quot;&gt;&lt;/a&gt;先给答案&lt;/h2&gt;&lt;p&gt;int(1)和int(10)有区别吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有区别&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;背
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="int(1)和int(10)有区别吗" scheme="http://www.devcheng.net/tags/int-1-%E5%92%8Cint-10-%E6%9C%89%E5%8C%BA%E5%88%AB%E5%90%97/"/>
    
      <category term="面试题" scheme="http://www.devcheng.net/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>程序员如何走出自己的安逸环境</title>
    <link href="http://www.devcheng.net/post/c0cb035d.html"/>
    <id>http://www.devcheng.net/post/c0cb035d.html</id>
    <published>2022-04-17T07:24:55.000Z</published>
    <updated>2022-06-17T07:34:08.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过去的几个月里发生的几件事情，让给政府做软件开发的人感受到压力的陡增，从奥巴马的医保网站饱受诟病到美国退伍军人事务部官方网站的预约系统从1985年起就没有更新过，这些事情让我回忆起曾经作为政府程序员的经历，以及这段经历如何变成一种一直督促我努力工作的思想动力。</p><p>我曾在某个政府部门维护过一个写于1990年代的老系统。当一个新的系统启动开发来替代部分的老系统功能时，很多的程序员对开发新系统的工作产生的严重的抵制心里。起初，我并不知道为什么他们会有这么大的反感。对这个系统维护一段时间之后，我才慢慢明白，有些程序员是专门维护系统，时间长达15年之久。当被邀请开发新系统时，他们对新事物和新技术都感到心里没底。</p><p>这让我警醒：这种事情也会很容易发生在我的职业生涯中。我可能会安逸的干着某一种工作，安逸的年年维护着某个系统。当这个系统长岁数时，我对它也变的更有价值，我的角色会最终变成专职维护它。我的余生也就整天执行相同的任务，直到退休。而当有一天，当这个系统不再被人需要时，我会发现外面的世界已经日新月异，我需要从头学起。</p><p>这可不是我希望的生活轨迹；我作为程序员喜欢的方式是学习新思路来解决新问题，而不是安于现状。我们程序员很容易迷住某一项技术而将全部精力都放在上面，对于其它的毫不关心。虽然这样可以让你在某一个领域成为专家，但你却得不到探索其它领域获得的更多好处。当意识到这种目光狭窄会扼杀我的进取心后，我开始避免让所有鸡蛋都放到一个篮子里，我开始走出自己职业仕途中的安逸环境。</p><h2 id="学习新技术"><a href="#学习新技术" class="headerlink" title="学习新技术"></a>学习新技术</h2><p>你一直在用PHP编程吗？尝试一下使用Rails或ASP.NET。也许尝试一种新的语言或框架会让你感到受挫和沮丧，但探索的趣味也就在这里。至少，你应该看看同一种功能用其它语言是如何实现的。如何你只会用锤子，那你眼里所有的东西看起来都像钉子。</p><h2 id="不惧怕老代码"><a href="#不惧怕老代码" class="headerlink" title="不惧怕老代码"></a>不惧怕老代码</h2><p>虽然上面我举例的那个老代码的例子有些极致，但我并不认为所有的老代码都应该立刻替换掉、删掉。在如今的软件中，有很多稳固的、良好设计的程序代码，它们对那些只会使用集成开发组件的现代程序员来说是很好的学习教材。如果你的公司里有老项目、老代码需要你去维护，研究一下！你会吃惊于从中学到那么多的编程知识以及公司的业务规则。还会发现一些当前正在研究的问题，其实几年以前就有人已经解决了。</p><h2 id="了解你的敌人"><a href="#了解你的敌人" class="headerlink" title="了解你的敌人"></a>了解你的敌人</h2><p>程序员很容易对某种语言或框架产生宗教式的虔诚。如果你发现自己曾经痛恨或鄙视某种技术(参看JeffAtwood的一篇经典文章)，也许你应该强迫自己去研究一下它们。<br>最不济，至少你能证明讨厌它们是有理由的。最好的情况是，你会从它们中学到很多东西。不要让你的偏见阻挡了你的探索道路。</p><h2 id="不要太贪心"><a href="#不要太贪心" class="headerlink" title="不要太贪心"></a>不要太贪心</h2><p>程序员很容易被各种层出不穷的新平台、新语言、新工具、新类库吓倒。你很容易产生一种恐惧心理，感觉自己已经落后——那些程序员谈论的技术我怎么从来没有听说过？当你发现一种新技术看起来很有用或很有趣时，做个笔记，几周或几月后在回来看看它，如果人们还在谈论它，那么，你就应该进一步研究它。事实上很多热门新技术都是昙花一现，你完全可以忽略它，不要让它们浪费了你的大脑。</p><h2 id="学无止境"><a href="#学无止境" class="headerlink" title="学无止境"></a>学无止境</h2><p>程序员都有着一种天生的好奇心，这种好奇心引导着我们的编程生涯。写几行代码，装载到计算机里，让它按照你的思路工作，这是非常有趣的事情。但随着开发的东西越来越多，我们变的越来越忙，这种好奇心会慢慢的减退。我们应该时不时的用一些新思路挑战自己，让自己的思想保持锋锐和专注，提醒自己为什么当初选择码农这条道路。</p><p>英文原文：Getting Out Of Your Comfort Zone</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;过去的几个月里发生的几件事情，让给政府做软件开发的人感受到压力的陡增，从奥巴马的医保网站饱受诟病到美国退伍军人事务部官方网站的预约系统从19
      
    
    </summary>
    
      <category term="codelife" scheme="http://www.devcheng.net/categories/codelife/"/>
    
    
      <category term="程序员" scheme="http://www.devcheng.net/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="职业规划" scheme="http://www.devcheng.net/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之组合模式</title>
    <link href="http://www.devcheng.net/post/d4faf60.html"/>
    <id>http://www.devcheng.net/post/d4faf60.html</id>
    <published>2022-02-23T01:01:33.000Z</published>
    <updated>2022-02-23T01:15:11.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式介绍"><a href="#组合模式介绍" class="headerlink" title="组合模式介绍"></a>组合模式介绍</h2><p>又叫整体-部分模式，它是一种将对象组合成树状的层次结构的模式，用来表示“整体-部分”的关系，使用户对单个对象和组合对象具有一致的访问性，属于结构型设计模式。</p><p>组合模式一般用来描述整体与部分的关系，它将对象组织到树形结构中，顶层的节点被称为根节点，根节点下面可以包含树枝节点和叶子节点，树枝节点下面又可以包含树枝节点和叶子节点，树形结构图如下。</p><p><img src="/images/devcheng_net_sjms_zh001.png" alt="“伊成博客”"></p><h2 id="组合模式UML类图"><a href="#组合模式UML类图" class="headerlink" title="组合模式UML类图"></a>组合模式UML类图</h2><p><img src="/images/devcheng_net_sjms_zh002.png" alt="“伊成博客”"></p><h2 id="模式构造"><a href="#模式构造" class="headerlink" title="模式构造"></a>模式构造</h2><p><strong> Component</strong>: 抽象构件。<br><strong> Leaf</strong>: 叶子构件。<br><strong> Composite</strong>: 容器构件。</p><p>组合模式分为<strong> 透明式 </strong>的组合模式和<strong> 安全式</strong>的组合模式。</p><h3 id="1-透明方式"><a href="#1-透明方式" class="headerlink" title="(1) 透明方式"></a>(1) 透明方式</h3><p>在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的。但其缺点是：树叶构件本来没有 Add()、Remove() 及 GetChild() 方法，却要实现它们（空实现或抛异常），这样会带来一些安全性问题。其结构图如图 1 所示。</p><p><img src="/images/devcheng_net_sjms_zh003.png" alt="“伊成博客”"></p><h3 id="2-安全方式"><a href="#2-安全方式" class="headerlink" title="(2) 安全方式"></a>(2) 安全方式</h3><p>在该方式中，将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题，但由于叶子和分支有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，所以失去了透明性。其结构图如图 2 所示。</p><p><img src="/images/devcheng_net_sjms_zh004.png" alt="“伊成博客”"></p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>下面就演示两种模式的实例的demo。</p><h3 id="透明组合模式"><a href="#透明组合模式" class="headerlink" title="透明组合模式"></a>透明组合模式</h3><p>下面为透明式的组合模式的实现代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component c0 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component c1 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component leaf1 = <span class="keyword">new</span> Leaf(<span class="string">"1"</span>);</span><br><span class="line">        Component leaf2 = <span class="keyword">new</span> Leaf(<span class="string">"2"</span>);</span><br><span class="line">        Component leaf3 = <span class="keyword">new</span> Leaf(<span class="string">"3"</span>);</span><br><span class="line">        c0.add(leaf1);</span><br><span class="line">        c0.add(c1);</span><br><span class="line">        c1.add(leaf2);</span><br><span class="line">        c1.add(leaf3);</span><br><span class="line">        c0.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象构件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树叶构件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"树叶"</span> + name + <span class="string">"：被访问！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树枝构件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Component&gt; children = <span class="keyword">new</span> ArrayList&lt;Component&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">        children.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">        children.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : children) &#123;</span><br><span class="line">            ((Component) obj).operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">树叶1：被访问！</span><br><span class="line">树叶2：被访问！</span><br><span class="line">树叶3：被访问！</span><br></pre></td></tr></table></figure><h3 id="安全组合模式"><a href="#安全组合模式" class="headerlink" title="安全组合模式"></a>安全组合模式</h3><p>安全式的组合模式与透明式组合模式的实现代码类似，只要对其做简单修改就可以了，代码如下。</p><p>首先修改 Component 代码，只保留层次的公共行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改客户端代码，将树枝构件类型更改为 Composite 类型，以便获取管理子类操作的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Composite c0 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Composite c1 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component leaf1 = <span class="keyword">new</span> Leaf(<span class="string">"1"</span>);</span><br><span class="line">        Component leaf2 = <span class="keyword">new</span> Leaf(<span class="string">"2"</span>);</span><br><span class="line">        Component leaf3 = <span class="keyword">new</span> Leaf(<span class="string">"3"</span>);</span><br><span class="line">        c0.add(leaf1);</span><br><span class="line">        c0.add(c1);</span><br><span class="line">        c1.add(leaf2);</span><br><span class="line">        c1.add(leaf3);</span><br><span class="line">        c0.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合模式的优缺点"><a href="#组合模式的优缺点" class="headerlink" title="组合模式的优缺点"></a>组合模式的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>高层模块调用简单。一棵树形机构中的所有节点都是Component，局部和整体对调用者来说没有任何区别，高层模块不必关心自己处理的是单个对象还是整个组合结构。</li><li>符合“开闭原则”。在组合模式中新增叶子构件和容器构件都很方便。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒转原则。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>前面分析了组合模式的结构与优缺点点，下面分析它适用的以下应用场景。</p><ul><li>在需要表示一个对象整体与部分的层次结构的场合。</li><li>要求对用户隐藏组合对象与单个对象的不同，用户可以用统一的接口使用组合结构中的所有对象的场合。</li></ul><h2 id="组合模式使用案例"><a href="#组合模式使用案例" class="headerlink" title="组合模式使用案例"></a>组合模式使用案例</h2><ol><li>JDK中AWT包和Swing包的设计是基于组合模式 ，在这些界面包中为用户提供了大量的容器构件（如 Container ）和成员构件（如 Checkbox 、 Button 和 TextComponent 等），他们都是继承、关联自抽象组件类Component。</li></ol><p>2.JDK中的Container类和HashMap类。</p><p><img src="/images/devcheng_net_sjms_zh005.png" alt="“伊成博客”"></p><p>通过看它的行为方法add()可以看出，它添加的是它的父类，符合组合模式的设计</p><p><img src="/images/devcheng_net_sjms_zh006.png" alt="“伊成博客”"></p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合模式介绍&quot;&gt;&lt;a href=&quot;#组合模式介绍&quot; class=&quot;headerlink&quot; title=&quot;组合模式介绍&quot;&gt;&lt;/a&gt;组合模式介绍&lt;/h2&gt;&lt;p&gt;又叫整体-部分模式，它是一种将对象组合成树状的层次结构的模式，用来表示“整体-部分”的关系，使用户对单个对象
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="组合模式" scheme="http://www.devcheng.net/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之桥接模式</title>
    <link href="http://www.devcheng.net/post/84fa502e.html"/>
    <id>http://www.devcheng.net/post/84fa502e.html</id>
    <published>2022-02-22T12:57:12.000Z</published>
    <updated>2022-02-22T13:10:10.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式介绍"><a href="#桥接模式介绍" class="headerlink" title="桥接模式介绍"></a>桥接模式介绍</h2><p>桥接模式的定义：桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(interface)模式。</p><p>【GOF95】在提出桥梁模式的时候指出，桥梁模式的用意是”将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化”。这句话有三个关键词，也就是<strong> 抽象化</strong>、<strong> 实现化</strong>和<strong> 脱耦</strong>。</p><h2 id="桥接模式UML类图"><a href="#桥接模式UML类图" class="headerlink" title="桥接模式UML类图"></a>桥接模式UML类图</h2><p><img src="/images/devcheng_net_sjms_qjms001.png" alt="“伊成博客”"></p><h2 id="模式构造"><a href="#模式构造" class="headerlink" title="模式构造"></a>模式构造</h2><p><strong> Abstraction</strong>：定义抽象接口，拥有一个Implementor类型的对象引用<br><strong> RefinedAbstraction</strong>：扩展Abstraction中的接口定义<br><strong> Implementor</strong>：是具体实现的接口，Implementor和RefinedAbstraction接口并不一定完全一致，实际上这两个接口可以完全不一样Implementor提供具体操作方法，而Abstraction提供更高层次的调用<br><strong> ConcreteImplementor</strong>：实现Implementor接口，给出具体实现</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>使用以上的类图结构，写一个实例demo 。</p><h3 id="Abstraction抽象类"><a href="#Abstraction抽象类" class="headerlink" title="Abstraction抽象类"></a>Abstraction抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="keyword">private</span> Implementor imp;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span>     <span class="comment">//约束子类必须实现该构造函数</span></span><br><span class="line"> <span class="number">6</span>     <span class="function"><span class="keyword">public</span> <span class="title">Abstraction</span><span class="params">(Implementor imp)</span> </span>&#123;</span><br><span class="line"> <span class="number">7</span>         <span class="keyword">this</span>.imp = imp;</span><br><span class="line"> <span class="number">8</span>     &#125;</span><br><span class="line"> <span class="number">9</span>     </span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> Implementor <span class="title">getImp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">11</span>         <span class="keyword">return</span> imp;</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span>     <span class="comment">//自身的行为和属性</span></span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>         <span class="keyword">this</span>.imp.doSomething();</span><br><span class="line"><span class="number">17</span>     &#125;</span><br><span class="line"><span class="number">18</span>     </span><br><span class="line"><span class="number">19</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="Implementor抽象类"><a href="#Implementor抽象类" class="headerlink" title="Implementor抽象类"></a>Implementor抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doAnything</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">5</span>     </span><br><span class="line"><span class="number">6</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="ConcreteImplementor具体实现类"><a href="#ConcreteImplementor具体实现类" class="headerlink" title="ConcreteImplementor具体实现类"></a>ConcreteImplementor具体实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="meta">@Override</span></span><br><span class="line"> <span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>         System.out.println(<span class="string">"具体实现A的doSomething执行"</span>);</span><br><span class="line"> <span class="number">6</span>     &#125;</span><br><span class="line"> <span class="number">7</span>     </span><br><span class="line"> <span class="number">8</span>     <span class="meta">@Override</span></span><br><span class="line"> <span class="number">9</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnything</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">10</span>         System.out.println(<span class="string">"具体实现A的doAnything执行"</span>);</span><br><span class="line"><span class="number">11</span>     &#125;</span><br><span class="line"><span class="number">12</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="RefinedAbstraction-类"><a href="#RefinedAbstraction-类" class="headerlink" title="RefinedAbstraction 类"></a>RefinedAbstraction 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="comment">//覆写构造函数</span></span><br><span class="line"> <span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor imp)</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>         <span class="keyword">super</span>(imp);</span><br><span class="line"> <span class="number">6</span>     &#125;</span><br><span class="line"> <span class="number">7</span>     </span><br><span class="line"> <span class="number">8</span>     <span class="comment">//修正父类行为</span></span><br><span class="line"> <span class="number">9</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">11</span>         <span class="keyword">super</span>.request();</span><br><span class="line"><span class="number">12</span>         <span class="keyword">super</span>.getImp().doAnything();</span><br><span class="line"><span class="number">13</span>     &#125;</span><br><span class="line"><span class="number">14</span>     </span><br><span class="line"><span class="number">15</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="Client客户端"><a href="#Client客户端" class="headerlink" title="Client客户端"></a>Client客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">4</span>         Implementor imp = <span class="keyword">new</span> ConcreteImplementorA();</span><br><span class="line"><span class="number">5</span>         Abstraction abs = <span class="keyword">new</span> RefinedAbstraction(imp);</span><br><span class="line"><span class="number">6</span>         abs.request();</span><br><span class="line"><span class="number">7</span>     &#125;</span><br><span class="line"><span class="number">8</span>     </span><br><span class="line"><span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="/images/devcheng_net_sjms_qjms002.png" alt="“伊成博客”"></p><h2 id="桥接模式的优缺点"><a href="#桥接模式的优缺点" class="headerlink" title="桥接模式的优缺点"></a>桥接模式的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>抽象和实现分离。桥梁模式完全是为了解决继承的缺点而提出的设计模式</li><li>优秀的扩展能力</li><li>实现细节对客户透明。客户不用关心细节的实现，它已经由抽象层通过聚合关系完成了封装</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>增加系统的理解与设计难度。由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程</li><li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1.一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。<br>2.对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。<br>3.如果你不希望在抽象和实现部分采用固定的绑定关系，可以采用桥接模式，来把抽象和实现部分分开，然后在程序运行期间来动态的设置抽象部分需要用到的具体的实现，还可以动态切换具体的实现。</p><h2 id="桥接模式使用案例"><a href="#桥接模式使用案例" class="headerlink" title="桥接模式使用案例"></a>桥接模式使用案例</h2><p>1.在JDK中的应用了桥接模式的类。</p><p>java.util.logging是JDK自带的日志包，可以将日志输出到文件、内存或者控制台，作用与我们常用的log4j类似。<br>包中的Handler类和Formatter类在设计上利用了桥接模式，首先看类关系图：<br><img src="/images/devcheng_net_sjms_qjms003.png" alt="“伊成博客”"></p><p>2.JDBC中的DriverManager接口也使用了桥接模式。</p><p>mysql的Driver类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>DriverManager类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url,</span></span></span><br><span class="line"><span class="function"><span class="params">        String user, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        java.util.Properties info = <span class="keyword">new</span> java.util.Properties();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            info.put(<span class="string">"user"</span>, user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (password != <span class="keyword">null</span>) &#123;</span><br><span class="line">            info.put(<span class="string">"password"</span>, password);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        String url, java.util.Properties info, Class&lt;?&gt; caller)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * When callerCl is null, we should check the application's</span></span><br><span class="line"><span class="comment">         * (which is invoking this class indirectly)</span></span><br><span class="line"><span class="comment">         * classloader, so that the JDBC driver class outside rt.jar</span></span><br><span class="line"><span class="comment">         * can be loaded from here.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ClassLoader callerCL = caller != <span class="keyword">null</span> ? caller.getClassLoader() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span>(DriverManager.class) &#123;</span><br><span class="line">            <span class="comment">// synchronize loading of the correct classloader.</span></span><br><span class="line">            <span class="keyword">if</span> (callerCL == <span class="keyword">null</span>) &#123;</span><br><span class="line">                callerCL = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"The url cannot be null"</span>, <span class="string">"08001"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"DriverManager.getConnection(\""</span> + url + <span class="string">"\")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Walk through the loaded registeredDrivers attempting to make a connection.</span></span><br><span class="line">        <span class="comment">// Remember the first exception that gets raised so we can reraise it.</span></span><br><span class="line">        SQLException reason = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">            <span class="comment">// If the caller does not have permission to load the driver then</span></span><br><span class="line">            <span class="comment">// skip it.</span></span><br><span class="line">            <span class="keyword">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    println(<span class="string">"    trying "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                    Connection con = aDriver.driver.connect(url, info);</span><br><span class="line">                    <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// Success!</span></span><br><span class="line">                        println(<span class="string">"getConnection returning "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                        <span class="keyword">return</span> (con);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        reason = ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">"    skipping: "</span> + aDriver.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if we got here nobody could connect.</span></span><br><span class="line">        <span class="keyword">if</span> (reason != <span class="keyword">null</span>)    &#123;</span><br><span class="line">            println(<span class="string">"getConnection failed: "</span> + reason);</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"getConnection: no suitable driver found for "</span>+ url);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"No suitable driver found for "</span>+ url, <span class="string">"08001"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是简化的代码，可以看到需要返回的是Connection对象。在Java中通过Connection提供给各个数据库一样的操作接口，这里的Connection可以看作抽象类。<br>可以说我们用来操作不同数据库的方法都是相同的，不过MySQL有自己的ConnectionImpl类，同样Oracle也有对应的实现类。这里Driver和Connection之间是通过DriverManager类进行桥接的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1、桥接模式实现了抽象化与实现化的脱耦。他们两个互相独立，不会影响到对方。</p><p>2、对于两个独立变化的维度，使用桥接模式再适合不过了。</p><p>3、对于”具体的抽象类”所做的改变，是不会影响到客户。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;桥接模式介绍&quot;&gt;&lt;a href=&quot;#桥接模式介绍&quot; class=&quot;headerlink&quot; title=&quot;桥接模式介绍&quot;&gt;&lt;/a&gt;桥接模式介绍&lt;/h2&gt;&lt;p&gt;桥接模式的定义：桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="桥接模式" scheme="http://www.devcheng.net/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>领导跳槽想带我走，我要不要跟</title>
    <link href="http://www.devcheng.net/post/bd5b017a.html"/>
    <id>http://www.devcheng.net/post/bd5b017a.html</id>
    <published>2022-02-20T07:56:17.000Z</published>
    <updated>2022-02-20T08:05:57.605Z</updated>
    
    <content type="html"><![CDATA[<p>前几天看到有网友问了这样一个问题：上司跳槽想带他一起走，薪资待遇都不错。但他不太喜欢这个领导，也知道领导只是想带个熟悉的人好干活，所以他很犹豫要不要跟。</p><p><img src="/images/devcheng_net_tiaochao001.jpeg" alt="“devcheng_net”"></p><p>另一名网友则贴了自己的经历：<br><img src="/images/devcheng_net_tiaochao002.jpeg" alt="“devcheng_net”"></p><p>领导另谋高就，想带你一起飞，看上去跟和不跟都有风险。<br>“跟还是不跟”这个问题不能搞一刀切或二元论，得考虑清楚以下三个问题后再做决定。</p><h2 id="你如何评价想要挖走自己的领导"><a href="#你如何评价想要挖走自己的领导" class="headerlink" title="你如何评价想要挖走自己的领导"></a>你如何评价想要挖走自己的领导</h2><p>你对这位领导有多信任？合作这些年他的工作能力如何？平时对待下属怎么样？他此次跳槽是深思熟虑还是一时冲动……<br>考虑这些问题的原因，无非是需要判断这个领导值不值得跟随，但在判断的过程中很多人想岔了，以为只要领导为人nice就行。但实际上，有时候上司性格nice并不代表他就是一个好领导。<br>世界经济论坛全球青年领袖Greg McKeown曾做过一项调研，在十二个月内收集了超过一百家公司的一千位经理人的资料，其中包括苹果、思科、IBM、英特尔、微软等公司，他想了解员工在什么环境下具备最佳的职业表现。<br>结果调研后发现，有一半的员工生产力折损在所谓的好领导手里。这些好领导的共同特征是很亲切，让你觉得舒服。<br>“好领导”这个词，首先落脚点是”领导”、其次才是”好”。领导的首要任务是让团队和下属有利可图，而不是让员工心情愉悦、如沐春风。而有些领导的 “坏”只是表征，在抽丝剥茧后，你会发现他们其实值得跟随。</p><h3 id="1）“压榨”下属，但承认下属的价值"><a href="#1）“压榨”下属，但承认下属的价值" class="headerlink" title="1）“压榨”下属，但承认下属的价值"></a>1）“压榨”下属，但承认下属的价值</h3><p>我的一位读者朋友曾给我留言晒过自己的领导。当年，他被现在的公司录用，但因为经验欠缺，所以和同岗的同事相比月薪低了30%。第一年，他拿着低于平均水平的工资却干着和大家一样的活，为了能尽快上手，他加了不少没有加班费的班，父母都劝他换份工作，省得被领导压榨得连骨头都不剩，但这位朋友还是坚持了下来。<br>第二年他独当一面后，当年完成了两个不错的项目，进步和成绩被领导看在了眼里，工资直接翻倍。<br>《奇葩说》辩手傅首尔曾在节目里说过：”职场老大义气，无非加钱二字，没有甜头、哪有劲头”。这种心里算得清下属价值的领导，无疑是值得跟随的。</p><h3 id="2）让人加班，但不会让人被工作完全绑架"><a href="#2）让人加班，但不会让人被工作完全绑架" class="headerlink" title="2）让人加班，但不会让人被工作完全绑架"></a>2）让人加班，但不会让人被工作完全绑架</h3><p>我弟弟的老板就是一个”极端”的领导。忙的时候拉着下属一天工作10小时，好多次午饭都顾不上吃。但高峰一旦忙完、或临近节假日没有项目时，他知道大家的心思不在工作上，所以会让大家提前收工、赶紧回家。“回去多陪陪家人不好么？干嘛在办公室耗费时间！”是他领导的经典语录。<br>从来都不加班的职场人少之又少，但最怕的就是那种自己是工作狂，就号召下属也24小时待命、见不得一点清闲、企图让工作成为你人生唯一目标的领导。</p><h3 id="3）比起秋后算账、更愿意遏制苗头"><a href="#3）比起秋后算账、更愿意遏制苗头" class="headerlink" title="3）比起秋后算账、更愿意遏制苗头"></a>3）比起秋后算账、更愿意遏制苗头</h3><p>秋后算账多容易，甩锅甩得漂亮、还能抖威风，”你看你，当时我就说xxx。”事后诸葛型领导不少见。比起”算账”，好领导们更愿意及时指出问题、让员工免于犯错。<br>和这种并不nice的领导共事，一开始往往会让人觉得不舒服，但日久见人心，当你看到工资卡上增长的数字和自己能力的成长时，你会知道没有跟错人。</p><h2 id="你如何评价现在的公司？"><a href="#你如何评价现在的公司？" class="headerlink" title="你如何评价现在的公司？"></a>你如何评价现在的公司？</h2><p>除了仔细评估上司值不值得跟随外，也要对老东家来一次“全面体检”。<br>比如，领导挪窝后你是否有上位的机会？在原公司你和其他同事相处得如何（去新公司意味着你要重新花费成本在人际关系上）？新上任的领导你是否熟悉、是否是好共事的人？他有没有能力带着部门更上一层楼？说到底，你要考量的是：目前，这是不是一家值得自己留下来的公司？<br>这里有三个评判标准——</p><h3 id="1）公司的经营状况"><a href="#1）公司的经营状况" class="headerlink" title="1）公司的经营状况"></a>1）公司的经营状况</h3><p>利润是衡量一家公司好坏的最硬标尺。如果一家公司盈利不佳，再好的模式和概念也毫无价值。多观察公司有没有客户经常往来、销售人员的精气神、领导整天都在忙什么、上一年的财报。一家持续盈利的公司是你留任的底线。</p><h3 id="2）公司给你的安全感"><a href="#2）公司给你的安全感" class="headerlink" title="2）公司给你的安全感"></a>2）公司给你的安全感</h3><p>公司盈利尚可，未必就代表能给员工带来安全感。根据猎聘大数据研究院发布的《未来职场”六感”研究白皮书》显示，职场人安全感的基石是薪资福利这些与钱有关的因素，但职场人需要的安全感不止是钱能满足的。<br>职场人最看重的企业提升安全感的举措首先是契约精神；其次是”健康、绿色的办公环境”和”保护员工条例(如反性骚扰、反职场霸凌等)”。<br><img src="/images/devcheng_net_tiaochao003.png" alt="“devcheng_net”"><br>领导是否兑现承诺、福利保障是否到位、办公室文化是否健康……这些都是你在选择留下来时要考虑的问题。</p><h3 id="3）你的升职空间"><a href="#3）你的升职空间" class="headerlink" title="3）你的升职空间"></a>3）你的升职空间</h3><p>你在现有公司你的升职空间到底有多大？留下来三五年后你可能的状况是什么样的？如果没有升职机会，单从工资收入这一点来说可能三五年后，你和现在生活的状况差不多。如果现在都是咬牙过日子，以后也可能是如此的现状，若干年后年龄大了，生活的压力更大，自己更没有勇气求变，只有被淘汰的份儿。<br>扫描一遍老东家后，也许你会发现比起离开，目前这里才是你更好的容身之地。</p><h2 id="你如何评价可能会去的新公司？"><a href="#你如何评价可能会去的新公司？" class="headerlink" title="你如何评价可能会去的新公司？"></a>你如何评价可能会去的新公司？</h2><p>领导想要挖走你的时候，肯定会对新公司做出更好的评价，但这个结论是从他的立场上作出的，很可能并不适用于你，所以你也需要对新公司有所了解。<br>宏观层面，要去了解与目前你所在的公司相比，新公司的优劣势（薪资福利、培训、技能、公司氛围）在哪里？做的事情你是否喜欢？如果一切如旧，离开原公司的意义在哪里？<br>微观层面。最重要的是了解清楚你加入后的职责——<br>你在部门的角色是什么？你的加入会给整个部门带来哪些作用？公司看重你的哪些技能？为什么需要你在这里工作？<br>考量这些问题无非是想弄清楚一件事：排除原上司这个因素，这家新公司值不值得你加入？而你在新公司的眼里，会是一个独立的职场人抑或只是你领导的“附属品”？</p><p>额外的“难题”——<br>如果选择留下，我如何面对新上司？</p><p>如果原领导离开，自己选择留任，公司空降了新上司。这时，我们将面临一个经典的职场问题：自己如何与新领导相处？<br>作为老员工的我们与新领导相处时，最好能守住“二要”和“三不要”原则。</p><h3 id="1）要尊重新领导"><a href="#1）要尊重新领导" class="headerlink" title="1）要尊重新领导"></a>1）要尊重新领导</h3><p>也许你对新上任的领导并不满意，但只要你的前途仰赖于他，该有的恭敬态度和礼貌还是要做到位。尤其当自己是老骨干、领导资浅（或者比自己年轻时）时，更不该摆谱儿。越资深、越恭谦，越容易得到新上司的赏识和重用。</p><h3 id="2）要主动与新领导沟通，帮助新领导"><a href="#2）要主动与新领导沟通，帮助新领导" class="headerlink" title="2）要主动与新领导沟通，帮助新领导"></a>2）要主动与新领导沟通，帮助新领导</h3><p>我们对新领导多数时候会采取敬而远之的态度，原因有二，一是不知道新领导的脾气秉性，怕贸然去打招呼会碰钉子、闹尴尬；二是怕别的员工说自己拍马屁、主动向新领导献殷勤。其实新官上任心里也很慌，如果我们能主动询问领导的需求，与领导积极沟通，新上司会对你心存感激的。</p><h3 id="3）不要在新领导面前评价前任领导"><a href="#3）不要在新领导面前评价前任领导" class="headerlink" title="3）不要在新领导面前评价前任领导"></a>3）不要在新领导面前评价前任领导</h3><p>前任领导的功过是否新上司可以从其他渠道得之，但从你口中得之，无论评价好坏，新领导都不会领情。</p><h3 id="4）不要议论部门同事"><a href="#4）不要议论部门同事" class="headerlink" title="4）不要议论部门同事"></a>4）不要议论部门同事</h3><p>有些领导喜欢从老员工那里打听团队成员的情况，点评每个人的优缺点，看似帮助领导熟悉人员情况，但你不知道新领导与其他员工的关系。贸然点评可能会给自己惹麻烦，还是让新领导自己去观察、评价比较好。</p><h3 id="5）不要急于向新领导表忠心"><a href="#5）不要急于向新领导表忠心" class="headerlink" title="5）不要急于向新领导表忠心"></a>5）不要急于向新领导表忠心</h3><p>虽然我们尊重新领导、愿意积极沟通，但也不要靠得太近，给自己贴上“我是新领导的人”的标签，在同事中难做人。<br>职场人想要有前途，平台、领导、自身能力三样缺一不可。好的领导是伯乐，可以助我们一臂之力，但说到底大家是利益联盟关系，我们不能将自己的前途过于依赖在某位领导的去留上。无论是跟随领导高就、还是留在原地，最终，打铁还需自身硬，要能做到走可以走得潇洒、留可以留得安心。</p><p>转载链接：<a href="https://www.wxnmh.com/thread-10047990.htm" target="_blank" rel="noopener">https://www.wxnmh.com/thread-10047990.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天看到有网友问了这样一个问题：上司跳槽想带他一起走，薪资待遇都不错。但他不太喜欢这个领导，也知道领导只是想带个熟悉的人好干活，所以他很犹豫要不要跟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/devcheng_net_tiaochao001.jpeg&quot; alt=
      
    
    </summary>
    
      <category term="codelife" scheme="http://www.devcheng.net/categories/codelife/"/>
    
    
      <category term="职场" scheme="http://www.devcheng.net/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="跳槽" scheme="http://www.devcheng.net/tags/%E8%B7%B3%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Mysql5.7主从配置保姆级别教程</title>
    <link href="http://www.devcheng.net/post/a1790e9a.html"/>
    <id>http://www.devcheng.net/post/a1790e9a.html</id>
    <published>2021-12-31T13:53:10.000Z</published>
    <updated>2022-01-01T11:54:30.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL主从配置"><a href="#MySQL主从配置" class="headerlink" title="MySQL主从配置"></a>MySQL主从配置</h2><p>指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。</p><p>对于多级复制，数据库服务器即可充当主机，也可充当从机。MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。</p><p>一句话表示就是，主数据库做什么，从数据库就跟着做什么。</p><h2 id="主从复制的工作原理"><a href="#主从复制的工作原理" class="headerlink" title="主从复制的工作原理"></a>主从复制的工作原理</h2><p>① Master 数据库只要发生变化，立马记录到Binary log 日志文件中。<br>② Slave数据库启动一个I/O thread连接Master数据库，请求Master变化的二进制日志。<br>③ Slave I/O获取到的二进制日志，保存到自己的Relay log 日志文件中。<br>④ Slave 有一个 SQL thread定时检查Realy log是否变化，变化那么就更新数据。</p><h2 id="三种复制方式"><a href="#三种复制方式" class="headerlink" title="三种复制方式"></a>三种复制方式</h2><p>（1）STATEMENT模式：基于语句的复制，在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。一旦发现没法精确复制时，会自动选择基于行的复制。</p><p>（2）ROW模式：基于行的复制，把改变的内容复制过去，而不是把命令在从服务器上执行一遍。从MySQL5.0开始支持。</p><p>（3）MIXED模式：混合类型复制，默认采用基于语句的复制，一旦发现基于语句无法精确复制时，就会采用基于行的复制。</p><h2 id="主从配置的优点"><a href="#主从配置的优点" class="headerlink" title="主从配置的优点"></a>主从配置的优点</h2><blockquote><p>提高数据库系统的可用性。<br>读写分离，提高查询访问性能，有效减少主数据库访问压力。<br>数据汇总，可将多个主数据库同步汇总到一个从数据库中，方便数据统计分析。<br>实时灾备，主数据库出现故障时，可快速切换到从数据库。</p></blockquote><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>建议本机安装虚拟机，准备两个MySQL，具体环境详情如下：</p><p>宿主机    centos7<br>MySQL版本 5.7<br>MySQL Master: 192.168.191.130<br>MySQL Slave : 192.168.191.131</p><h2 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h2><p>① 修改主库的 my.cnf 文件，添加如下配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server-id=1       #服务器id</span><br><span class="line">log-bin=mysql-bin #打开日志，master需要打开</span><br><span class="line"></span><br><span class="line">binlog-do-db=db_ly #这里写你需要同步的数据库名！这里一定要写对你要同步的数据库名</span><br><span class="line">binlog-ignore-db=mysql #忽略不需要同步给从库的数据库名</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=performance_schema</span><br><span class="line">binlog-ignore-db=sys</span><br><span class="line">expire_logs_days=7 #自动清理7天前的log文件,可根据需要修改</span><br></pre></td></tr></table></figure><p>tips ：修改完成后按esc  按：wq 回车  保存并退出！</p><p> ② 重启mysql服务，输入以下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure></p><p> ③ 登录MySQL查看测试log_bin是否成功开启 （ON 代表已开启）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot  # 登录mysql</span><br></pre></td></tr></table></figure></p><p>执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%log_bin%&apos;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins /]# mysql -uroot -proot </span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.35-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;%log_bin%&apos;;</span><br><span class="line">+---------------------------------+--------------------------------+</span><br><span class="line">| Variable_name                   | Value                          |</span><br><span class="line">+---------------------------------+--------------------------------+</span><br><span class="line">| log_bin                         | ON                             |</span><br><span class="line">| log_bin_basename                | /var/lib/mysql/mysql-bin       |</span><br><span class="line">| log_bin_index                   | /var/lib/mysql/mysql-bin.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                            |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                            |</span><br><span class="line">| sql_log_bin                     | ON                             |</span><br><span class="line">+---------------------------------+--------------------------------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>④ 创建master的数据库中建立备份账号：root 为用户名，%表示任何远程地址。<br>如下表示密码为 root 的任何远程地址的root都可以连接master主机。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root&apos;;</span><br></pre></td></tr></table></figure></p><p> ⑤ 查看刚刚创建的账号是否存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select user,authentication_string,host from user;</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">| user          | authentication_string                     | host      |</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">| root          | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | localhost |</span><br><span class="line">| mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost |</span><br><span class="line">| mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost |</span><br><span class="line">| root          | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | %         |</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>⑥ 查看主服务器上当前的二进制日志名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+-------------------------------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                                | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+-------------------------------------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      439 | master       | mysql,information_schema,performance_schema,sys |                   |</span><br><span class="line">+------------------+----------+--------------+-------------------------------------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>Tips: 到此MySQL master的设置就设置完毕！</p><h2 id="从库设置"><a href="#从库设置" class="headerlink" title="从库设置"></a>从库设置</h2><p> ① 修改从库的 my.cnf 文件，添加如下配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server_id=2 #从库的服务器id，不能和主库的一样！切记！！！</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repostitory=TABLE</span><br></pre></td></tr></table></figure><p>② 登录MySQL，设置上面主库对应的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# mysql -uroot -proot</span><br></pre></td></tr></table></figure></p><p>  执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;192.168.191.130&apos;,</span><br><span class="line">master_user=&apos;root&apos;,master_password=&apos;root&apos;,</span><br><span class="line">master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=439;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave #记得先关闭</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  change master to master_host=&apos;192.168.191.130&apos;,</span><br><span class="line">    -&gt;  master_user=&apos;root&apos;,master_password=&apos;root&apos;,</span><br><span class="line">    -&gt;  master_log_file=&apos;mysql-bin.000001&apos;,master_log_pos=439;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;#设置好了之后记得从新start slave</span><br></pre></td></tr></table></figure><p>③  查看slave 的状态，执行一下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.191.130</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000008</span><br><span class="line">          Read_Master_Log_Pos: 847</span><br><span class="line">               Relay_Log_File: localhost-relay-bin.000013</span><br><span class="line">                Relay_Log_Pos: 1060</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000008</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 847</span><br><span class="line">              Relay_Log_Space: 1437</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: 99e35046-6492-11ec-b188-000c2902ba69</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p> Slave_IO_Running: Yes<br> Slave_SQL_Running: Yes<br>看到  Slave_IO_Running 和  Slave_SQL_Running 均为YES 则说明我们配置的主从已经成功了！</p><h2 id="测试主从"><a href="#测试主从" class="headerlink" title="测试主从"></a>测试主从</h2><p>① 切换至主库，创建主库中指定的 db_ly 数据库测试一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use db_ly;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; create table `tb_001`(`id` int(11) not null,`tb_user` int(11) not null,primary key(`id`)) engine=InnoDB DEFAULT CHARSET=latin1;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into tb_001 value(&apos;1&apos;,&apos;1&apos;);</span><br><span class="line">Query OK, 1 row affected (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>② 查看同步后的数据。</p><p><img src="/images/devcheng_net_mysql_zhucong001.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_mysql_zhucong002.png" alt="“伊成博客”"></p><p>到此主从配置就成功了！</p><p>常见问题集合</p><h3 id="常见问题一：-ERROR-2003-HY000-Can’t-connect-to-MySQL-server-on-‘192-168-191-130’-113"><a href="#常见问题一：-ERROR-2003-HY000-Can’t-connect-to-MySQL-server-on-‘192-168-191-130’-113" class="headerlink" title="常见问题一： ERROR 2003 (HY000): Can’t connect to MySQL server on ‘192.168.191.130’ (113)"></a>常见问题一： ERROR 2003 (HY000): Can’t connect to MySQL server on ‘192.168.191.130’ (113)</h3><p>解决方法：<br>① 尝试远程连接数据库 (通常都是这个原因无法远程连上MySQL)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.191.130 -uroot -proot</span><br></pre></td></tr></table></figure></p><p>如果无法登录 则使用下面命令：<br><strong>重新复权</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">#这条命令也别忘记了</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>然后可以再次尝试远程登录MySQL。</p><p>② 测试能否ping通远程IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.191.130</span><br></pre></td></tr></table></figure></p><p>③ 如果IP是通的，则测试能否访问到端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.191.130 3306</span><br></pre></td></tr></table></figure></p><p> 如果通不了，则说明防火墙是开启的，直接关闭防火墙即可（生产环境不推荐这么玩啊~）。</p><p>④ 查看my.cnf文件是不是没有注释 bind-address = 127.0.0.1</p><h3 id="常见问题二：Last-IO-Errno-1593"><a href="#常见问题二：Last-IO-Errno-1593" class="headerlink" title="常见问题二：Last_IO_Errno: 1593"></a>常见问题二：Last_IO_Errno: 1593</h3><p>① 可能是server-id重复。</p><p>解决方法：<br>任意选一个服务器修改对应的server-id 即可，<br>输入命令如下，找到对应的 server-id 修改保存即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure></p><p>② 可能是server-uuid重复。<br>一般导致这个问题就是在虚拟机中装好MySQL之后，直接copy导致的。</p><p>解决方法：<br>先登录MySQL使用命令，产生一个uuid。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select  uuid();</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| uuid()                               |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| 0eec5819-78a2-11e9-84d0-525400534aff |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure></p><p>然后修改其中一个MySQL的auto.cnf配置文件，修改完成后保存退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-cluster-s19423 ~]# vim  /var/lib/mysql/auto.cnf </span><br><span class="line">[auto]</span><br><span class="line">server-uuid=b1bfa5f4-6a95-11e9-8049-525400534aee</span><br><span class="line">~</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>重启这个MySQL即可。</p><p>tips: 如果主从配置有问题通常 Last_IO_Errno 和 Last_IO_Error 会有对应提示的错误码和错误信息。 </p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL主从配置&quot;&gt;&lt;a href=&quot;#MySQL主从配置&quot; class=&quot;headerlink&quot; title=&quot;MySQL主从配置&quot;&gt;&lt;/a&gt;MySQL主从配置&lt;/h2&gt;&lt;p&gt;指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="Mysql" scheme="http://www.devcheng.net/tags/Mysql/"/>
    
      <category term="主从配置" scheme="http://www.devcheng.net/tags/%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringBoot开发的新闻发布管理系统源码分享</title>
    <link href="http://www.devcheng.net/post/f563b3cc.html"/>
    <id>http://www.devcheng.net/post/f563b3cc.html</id>
    <published>2021-12-29T01:16:41.000Z</published>
    <updated>2021-12-29T02:00:15.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>本项目是基于Spring Boot 2.x 开发的，新闻发布管理系统分为前台和后台两个部分。本项目可以当作毕业设计，期末课程作业等，也可以当作学习、进阶Spring Boot 的资料。</p><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a><strong>功能描述</strong></h2><p>本项目前台系统主要是新闻数据展示，便于用户阅读对应的新闻，支持用户阅读新闻后留言和打赏的功能；后台新闻发布管理系统提供给管理员新增、编辑以及删除新闻等操作，同时支持新闻分类，新闻标签等功能操作。</p><h2 id="主要功能有："><a href="#主要功能有：" class="headerlink" title="主要功能有："></a><strong>主要功能有：</strong></h2><ul><li>新闻搜索</li><li>新闻留言</li><li>新闻打赏</li><li>管理员登录</li><li>新闻管理</li><li>分类管理</li><li>标签管理</li><li>管理员退出</li><li>…</li></ul><h2 id="开发环境（运行环境）"><a href="#开发环境（运行环境）" class="headerlink" title="开发环境（运行环境）"></a><strong>开发环境（运行环境）</strong></h2><ul><li>系统环境：Windows 10</li><li>开发工具：IntelliJ IDEA 2020.3</li><li>Java版本：JDK 1.8</li><li>Mysql版本：5.7</li><li>Maven版本：3.6.3</li></ul><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a><strong>项目技术栈</strong></h2><ul><li>Spring Boot 2.3.X.RELEASE</li><li>Spring Boot JPA</li><li>Maven 3.X</li><li>Mysql</li><li>thymeleaf</li><li>Semantic UI 2.4.2</li><li>Jquery</li><li>…</li></ul><h2 id="登录地址"><a href="#登录地址" class="headerlink" title="登录地址"></a><strong>登录地址</strong></h2><p>访问路径：<a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a></p><p>管理员登录路径：<a href="http://localhost:8082/admin" target="_blank" rel="noopener">http://localhost:8082/admin</a><br>管理员账号： admin<br>管理员密码： 123456</p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a><strong>项目截图</strong></h2><p><img src="/images/devcheng_net_new0001.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0002.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0003.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0004.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0005.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0006.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0007.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0008.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_new0009.png" alt="“伊成博客”"></p><h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a><strong>联系我们</strong></h2><p>如有需要源码可以通过QQ 搜索：792435323联系我！<br>请备注：新闻发布系统</p><h2 id="项目演示视频"><a href="#项目演示视频" class="headerlink" title="项目演示视频"></a><strong>项目演示视频</strong></h2><p>链接: <a href="https://pan.baidu.com/s/1VAnfIm4UnZ2gwZJvjWRTyQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1VAnfIm4UnZ2gwZJvjWRTyQ</a><br>提取码: gjk2</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><p>获取代码之后，使用IDEA导入本项目前，请确保你本地环境是已经含有代码所需要运行环境的条件了。</p><p>接着找到对应的sql文件，将其导入到你本地的数据库即可。</p><p>最后修改项目中配置文件中的数据库对应的信息，确认修改完毕，找到对应的NewsApplication直接运行吧！</p><h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a><strong>其它说明</strong></h2><p>白嫖怪请绕道！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本项目是基于Spring Boot 2.x 开发的，新闻发布管理系统分为前台和后台两个部分。本项目可以当作
      
    
    </summary>
    
      <category term="codeshare" scheme="http://www.devcheng.net/categories/codeshare/"/>
    
    
      <category term="新闻发布管理系统" scheme="http://www.devcheng.net/tags/%E6%96%B0%E9%97%BB%E5%8F%91%E5%B8%83%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="毕设" scheme="http://www.devcheng.net/tags/%E6%AF%95%E8%AE%BE/"/>
    
      <category term="springboot" scheme="http://www.devcheng.net/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringBoot开发的宠物管理系统源码分享</title>
    <link href="http://www.devcheng.net/post/eb48f8f9.html"/>
    <id>http://www.devcheng.net/post/eb48f8f9.html</id>
    <published>2021-12-16T11:48:47.000Z</published>
    <updated>2021-12-16T12:04:46.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>本项目是基于Spring Boot 2.x 开发的，宠物管理系统分为前台系统和后台数据管理系统，可以当作毕业设计，期末课程作业等，也可以当作学习、进阶Spring Boot 的资料。</p><h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a><strong>项目描述</strong></h2><p>本项目前台系统主要是数据展示，提供给用户领养宠物和购买宠物用品等功能；后台数据管理系统分为普调用户和管理员两种角色。管理员可以管理用户，宠物信息，商品信息，订单信息等。</p><h2 id="主要功能有："><a href="#主要功能有：" class="headerlink" title="主要功能有："></a><strong>主要功能有：</strong></h2><ul><li>数据分析</li><li>会员管理</li><li>宠物信息管理</li><li>管理员管理</li><li>商品管理</li><li>订单管理</li><li>登录&amp;注册功能</li><li>购物车功能</li><li>个人信息功能</li><li>宠物领养功能</li><li>…</li></ul><h2 id="开发环境（运行环境）"><a href="#开发环境（运行环境）" class="headerlink" title="开发环境（运行环境）"></a><strong>开发环境（运行环境）</strong></h2><p>系统环境：Windows 10</p><ul><li>开发工具：IntelliJ IDEA 2020.3</li><li>Java版本：JDK 1.8</li><li>Mysql版本：5.7</li><li>Maven版本：3.6.3</li></ul><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a><strong>项目技术栈</strong></h2><ul><li>Spring Boot 2.3.7.RELEASE</li><li>Mybatis</li><li>Maven 3.X</li><li>Mysql</li><li>thymeleaf</li><li>Layui</li><li>Jquery</li><li>Echarts</li><li>…</li></ul><h2 id="登录地址"><a href="#登录地址" class="headerlink" title="登录地址"></a><strong>登录地址</strong></h2><p><a href="http://localhost:8081/index" target="_blank" rel="noopener">http://localhost:8081/index</a><br>管理员账号： <a href="mailto:admin@pet.com" target="_blank" rel="noopener">admin@pet.com</a><br>管理员密码： 1234qwer</p><p>其它用户账号密码默认均为：1234qwer</p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a><strong>项目截图</strong></h2><p><img src="/images/devcheng_net_cwsys_001.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_002.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_003.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_004.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_005.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_006.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_007.png" alt="“伊成博客”"></p><p><img src="/images/devcheng_net_cwsys_008.png" alt="“伊成博客”"></p><h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a><strong>联系我们</strong></h2><p>如有需要源码可以通过QQ 搜索：792435323联系我！<br>请备注：宠物管理系统</p><h2 id="项目演示视频"><a href="#项目演示视频" class="headerlink" title="项目演示视频"></a><strong>项目演示视频</strong></h2><p>链接: <a href="https://pan.baidu.com/s/1pvYZIQ3DmBqfXw13AhuhkA" target="_blank" rel="noopener">https://pan.baidu.com/s/1pvYZIQ3DmBqfXw13AhuhkA</a><br>提取码: gid8 </p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><p>获取代码之后，使用IDEA导入本项目前，请确保你本地环境是已经含有代码所需要运行环境的条件了。</p><p>接着找到对应的sql文件，将其导入到你本地的数据库即可。</p><p>最后修改项目中配置文件中的数据库对应的信息，确认修改完毕，找到对应的PetManagerApplication直接运行吧！</p><h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a><strong>其它说明</strong></h2><p>白嫖怪请绕道！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本项目是基于Spring Boot 2.x 开发的，宠物管理系统分为前台系统和后台数据管理系统，可以当作毕
      
    
    </summary>
    
      <category term="codeshare" scheme="http://www.devcheng.net/categories/codeshare/"/>
    
    
      <category term="SpringBoot" scheme="http://www.devcheng.net/tags/SpringBoot/"/>
    
      <category term="毕业设计" scheme="http://www.devcheng.net/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="宠物管理系统" scheme="http://www.devcheng.net/tags/%E5%AE%A0%E7%89%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="源码" scheme="http://www.devcheng.net/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之抽象工厂模式</title>
    <link href="http://www.devcheng.net/post/6f820280.html"/>
    <id>http://www.devcheng.net/post/6f820280.html</id>
    <published>2021-12-13T12:54:39.000Z</published>
    <updated>2021-12-13T13:01:38.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抽象工厂模式介绍"><a href="#抽象工厂模式介绍" class="headerlink" title="抽象工厂模式介绍"></a>抽象工厂模式介绍</h2><p>抽象工厂模式的定义：为创建一组相关或者互相依赖的对象提供一个接口，而无需指定它们对应的具体类。</p><p>具体可以这样理解，世界各地都有自己的水果园，我们将这些水果园抽象为一个水果园接口，在中国、英国和美国都有水果园，种植不同的水果，比如苹果、香蕉和梨等。这里将苹果进行抽象，所以，苹果又分为中国苹果，英国苹果和美国苹果。中国的水果园中有苹果、香蕉和梨等。抽象工厂中声明生产苹果、香蕉和梨等水果，那么具体的工厂相当于中国、英国和美国的水果园，各个水果园负责生产水果、香蕉和梨等。</p><h2 id="抽象工厂模式UML类图"><a href="#抽象工厂模式UML类图" class="headerlink" title="抽象工厂模式UML类图"></a>抽象工厂模式UML类图</h2><p><img src="/images/devcheng_net_sjms_cxgcms001.png" alt="“伊成博客”"></p><p>对比工厂方法模式，通过它们之间的类图对比，得知工厂方法模式中也是可以有多个具体工厂，也是可以有多个抽象产品，和多个具体工厂、具体产品类。</p><p>区别是在抽象工厂接口类中，能创建几个产品对象。抽象工厂模式的工厂能创建多个相关的产品对象，而工厂方法模式的工厂只创建一个产品对象。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>利用抽象工厂模式演示文中开头提及的世界各地都有自己的水果园的理解，下面请看代码。</p><p>1.创建Fruit接口、Apple抽象类、ChinaApple类等</p><p>Fruit(interface):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Apple抽象类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ChinaApple类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中国的苹果..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.创建抽象工厂、具体工厂</p><p>抽象工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化苹果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//实例化香蕉</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChinaApple();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChinaBanana();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建中国工厂</span></span><br><span class="line">        FruitFactory chinaFactory = <span class="keyword">new</span> ChinaFactory();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国苹果实例</span></span><br><span class="line">        Fruit apple = chinaFactory.getApple();</span><br><span class="line">        apple.get();</span><br><span class="line">        <span class="comment">//通过中国工厂生产中国香蕉实例</span></span><br><span class="line">        Fruit banana = chinaFactory.getBanana();</span><br><span class="line">        banana.get();        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建英国工厂</span></span><br><span class="line">        FruitFactory englandFactory = <span class="keyword">new</span> EnglandFactory();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国苹果实例</span></span><br><span class="line">        Fruit apple1 = englandFactory.getApple();</span><br><span class="line">        apple1.get();</span><br><span class="line">        <span class="comment">//通过英国工厂生产英国香蕉实例</span></span><br><span class="line">        Fruit banana2 = englandFactory.getBanana();</span><br><span class="line">        banana2.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果输出如下：<br><img src="/images/devcheng_net_sjms_cxgcms002.png" alt="“伊成博客”"></p><h2 id="抽象工厂模式的优缺点"><a href="#抽象工厂模式的优缺点" class="headerlink" title="抽象工厂模式的优缺点"></a>抽象工厂模式的优缺点</h2><p><strong>优点：</strong><br> 1.针对同一组产品创建新的生产线，只需实现那组产品的抽象工厂接口即可创建新的工厂类。</p><p><strong>缺点：</strong><br>抽象工厂模式的最大缺点就是产品族本身的扩展非常困难。如果在产品族中增加一个新的产品类型，则需要修改多个接口，并影响现已有的工厂类。</p><p>抽象工厂模式使用案例<br>1.在JDK中的应用，Collection接口<br><img src="/images/devcheng_net_sjms_cxgcms003.png" alt="“伊成博客”"></p><p>Collection就是一个抽象工厂，它提供了一个产品类的库，所有产品都以同样接口出现，从而使客户端不依赖于具体实现。工厂方法则是抽象工厂里面的其中一个产品类，并且把这个方法的实例化放入具体的实现类中  。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>工厂模式有三种：简单工厂模式，工厂方法模式，抽象工厂模式。<br>三种工厂模式个人感觉最大的区别就是，每种模式抽象的层级不一样，抽象的程度不一样。<br>不存在那种设计模式比较好，存在即合理。特定场景使用符合的设计模式才是正确的选择。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;抽象工厂模式介绍&quot;&gt;&lt;a href=&quot;#抽象工厂模式介绍&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式介绍&quot;&gt;&lt;/a&gt;抽象工厂模式介绍&lt;/h2&gt;&lt;p&gt;抽象工厂模式的定义：为创建一组相关或者互相依赖的对象提供一个接口，而无需指定它们对应的具体类
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="http://www.devcheng.net/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之工厂方法模式</title>
    <link href="http://www.devcheng.net/post/bca6e87b.html"/>
    <id>http://www.devcheng.net/post/bca6e87b.html</id>
    <published>2021-12-12T06:42:49.000Z</published>
    <updated>2021-12-12T06:49:29.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂方法模式介绍"><a href="#工厂方法模式介绍" class="headerlink" title="工厂方法模式介绍"></a>工厂方法模式介绍</h2><p>定义了一个创建对象的抽象方法，由子类决定要实例化的类，工厂方法模式将对象的实例化推迟到子类。</p><p>介绍工厂方法模式之前，整个工厂方法模式分为：<strong> 简单工厂模式，工厂方法模式，抽象工厂模式</strong>三种。</p><p><strong> 简单工厂模式 </strong>的创建意图就是，把对类的创建初始化全都交给一个工厂来执行，而用户不需要去关心创建的过程是什么样的，只用告诉工厂我想要什么就行了。</p><p>而这种方法的缺点也很明显，违背了设计模式的<strong>开闭原则</strong>，因为如果你要增加工厂可以初始化的类的时候，你必须对工厂进行改建。</p><h2 id="工厂方法模式UML类图"><a href="#工厂方法模式UML类图" class="headerlink" title="工厂方法模式UML类图"></a>工厂方法模式UML类图</h2><p><img src="/images/devcheng_net_gcffms_001.png" alt="“伊成博客”"></p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>ConcreteCreator： 抽象工厂角色，担任这个角色是工厂方法模式的核心，它是与应用程序无关的。任何在模式中创建对象的工厂类必须实现这个接口。</p><p>Creator： 具体工厂角色，担任这个角色的是实现了抽象工厂接口的具体Java类，具体工厂角色含有与应用密切相关的逻辑，并且受到应用程序的调用以创建产品对象。</p><p>ConcreteProduct： 抽象产品角色，工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</p><p>Product： 具体产品角色，这个角色实现了抽象产品角色所申明的接口。工厂方法模式所创建的每一个对象都是某个具体产品角色的实例。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>一个厨师（工厂类）负责所有的烤披萨任务，太累了。于是招了两个厨师分别负责烤披萨和切披萨，之前的厨师升级为厨师长（抽象工厂类），负责教那两位厨师（具体工厂类）烤披萨，自己则不用亲自动手烤披萨了。</p><p>下面是抽象产品的角色Pizza的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体角色CheesePizza的源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备CheesePizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体角色GreekPizza的源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"准备GreekPizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象工厂角色PizzaFactory的代码，这个角色是使用一个Java接口实现，它声明了一个工厂方法，要求所有的具体工厂角色实现这个工厂方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是具体工厂角色CheesePizzaFactory的代码，这个角色实现了抽象工厂角色PizzaFactory所声明的工厂方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizzaFactory</span> <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体工厂角色GreekPizzaFactory的代码，这个角色实现了抽象工厂角色PizzaFactory所声明的工厂方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizzaFactory</span> <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreekPizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端角色的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizaa</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建CheesePizzaFactory--具体工厂类</span></span><br><span class="line">        <span class="comment">//可以通过反射和配置文件来获取和存储具体工厂类的类名，更换新的具体工厂时无须修改源代码，系统扩展更为方便</span></span><br><span class="line">        PizzaFactory factory = <span class="keyword">new</span> CheesePizzaFactory();</span><br><span class="line">        Pizza pizza = factory.createPizza();</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="comment">//创建GreekPizzaFactory()--具体工厂类</span></span><br><span class="line">        pizza = factory.createPizza();</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">准备CheesePizza</span><br><span class="line">正在烤CheesePizza</span><br><span class="line">正在切CheesePizza</span><br><span class="line">正在打包CheesePizza</span><br><span class="line">准备GreekPizza</span><br><span class="line">正在烤GreekPizza</span><br><span class="line">正在切GreekPizza</span><br><span class="line">正在打包GreekPizza</span><br></pre></td></tr></table></figure></p><h2 id="工厂方法模式的优缺点"><a href="#工厂方法模式的优缺点" class="headerlink" title="工厂方法模式的优缺点"></a>工厂方法模式的优缺点</h2><p><strong> 优点：</strong><br> 1.遵循开闭原则，新增产品类时只需要增加相应的工厂以及产品即可，不需要修改原有的代码。<br> 2.符合单一职责原则，每个工厂类只负责一种产品的创建<br> 3.使用非静态方法来创建产品，利于后续对产品的拓展，可拓展性增加</p><p><strong> 缺点：</strong><br>1.一个工厂只能创建一种产品<br>2.每次增加新的产品时都需要增加对应的工厂类，当产品越来越多的时候系统创建的工厂类就越多，越来越复杂，不利于后期维护。同时，类的创建和销毁可能会对系统造成一定的开销。</p><h2 id="工厂方法模式使用案例"><a href="#工厂方法模式使用案例" class="headerlink" title="工厂方法模式使用案例"></a>工厂方法模式使用案例</h2><p>1.JDK中体现：Collection.iterator方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Collection接口里面定义了许多方法就像size(),isEmpty(),iterator()等等这些方法可以认为是工厂里面的产品，Collection可以看作是一个总的抽象工厂。</p><p>它的一些实现这个接口的类，像ArrayList，LinkedHashSet等等可以看作一个个不同的品牌的工厂，而总的产品Iterator接口里面会定义产品所需功能的细节，然后在交给各个品牌不同的工厂来实现。</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂方法模式介绍&quot;&gt;&lt;a href=&quot;#工厂方法模式介绍&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式介绍&quot;&gt;&lt;/a&gt;工厂方法模式介绍&lt;/h2&gt;&lt;p&gt;定义了一个创建对象的抽象方法，由子类决定要实例化的类，工厂方法模式将对象的实例化推迟到子类。
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂方法模式" scheme="http://www.devcheng.net/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式之建造者模式</title>
    <link href="http://www.devcheng.net/post/cae13d29.html"/>
    <id>http://www.devcheng.net/post/cae13d29.html</id>
    <published>2021-12-06T11:56:18.000Z</published>
    <updated>2021-12-06T12:15:47.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建造者模式介绍"><a href="#建造者模式介绍" class="headerlink" title="建造者模式介绍"></a>建造者模式介绍</h2><p>建造者模式，顾名思义的就是类似建房子，有一个固定的流程。在大话设计模式中，有一个例子大概意思是同一道菜在中国的每一个地方都有不同的味道，而肯德基的鸡腿、汉堡在每一个城市都是一样的味道。我觉的这一个例子可以清楚的认识到建造者模式有一个固定的建造过程。建造者模式实现了依赖倒转原则，<strong>抽象不应该依赖细节，细节应该依赖与抽象。</strong></p><p>建造者模式的定义是：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。</p><h2 id="建造者模式UML类图"><a href="#建造者模式UML类图" class="headerlink" title="建造者模式UML类图"></a>建造者模式UML类图</h2><p><img src="/images/devcheng_net_jzzms_001.png" alt="“伊成博客”"></p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><strong>Builder：</strong> 抽象建造者角色。为创建一个产品对象的各个部件指定抽象接口。</p><p><strong>ConcreteBuilder：</strong>具体建造者角色。实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。</p><p><strong>Director：</strong>指挥者角色。该角色负责调用具体建造者按照顺序建造产品。只负责调度，真正执行的是具体建造者角色。</p><p><strong>Product：</strong>产品角色。该角色是建造的复杂对象，提供基本方法</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>假如现在要造两辆豪车，一辆是兰博基尼，一辆是法拉利。那怎么用代码实现造这两辆豪车呢？<br>首先看产品角色代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Production</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String part1;</span><br><span class="line">    <span class="keyword">private</span> String part2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart1</span><span class="params">(String part1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.part1 = part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart2</span><span class="params">(String part2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.part2 = part2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象建造者角色代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产品有多少个组件，就有多少个建造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回产品类 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 开始造兰博基尼：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderA</span> <span class="keyword">implements</span> <span class="title">IBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Production production = <span class="keyword">new</span> Production();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造兰博基尼的第一部分。"</span>);</span><br><span class="line">        production.setPart1(<span class="string">"This is part1 of Lamborghini"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造兰博基尼的第二部分。"</span>);</span><br><span class="line">        production.setPart2(<span class="string">"This is part2 of Lamborghini"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"兰博基尼已造好！"</span>);</span><br><span class="line">        <span class="keyword">return</span> production;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开始造法拉利：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderB</span> <span class="keyword">implements</span> <span class="title">IBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Production production = <span class="keyword">new</span> Production();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造法拉利的第一部分。"</span>);</span><br><span class="line">        production.setPart1(<span class="string">"This is part1 of Ferrari"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造法拉利的第二部分。"</span>);</span><br><span class="line">        production.setPart2(<span class="string">"This is part2 of Ferrari"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"法拉利已造好！"</span>);</span><br><span class="line">        <span class="keyword">return</span> production;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指挥者调度构建，返回对应产品。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(IBuilder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.buildPart1();</span><br><span class="line">        builder.buildPart2();</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用一下，查看输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 兰博基尼</span></span><br><span class="line">        IBuilder builderA = <span class="keyword">new</span> BuilderA();</span><br><span class="line">        Director directorA = <span class="keyword">new</span> Director(builderA);</span><br><span class="line">        directorA.construct();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 法拉利</span></span><br><span class="line">        IBuilder builderB = <span class="keyword">new</span> BuilderB();</span><br><span class="line">        Director directorB = <span class="keyword">new</span> Director(builderB);</span><br><span class="line">        directorB.construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">构造兰博基尼的第一部分。</span><br><span class="line">构造兰博基尼的第二部分。</span><br><span class="line">兰博基尼已造好！</span><br><span class="line"></span><br><span class="line">构造法拉利的第一部分。</span><br><span class="line">构造法拉利的第二部分。</span><br><span class="line">法拉利已造好！</span><br></pre></td></tr></table></figure></p><h2 id="建造者模式的优缺点"><a href="#建造者模式的优缺点" class="headerlink" title="建造者模式的优缺点"></a>建造者模式的优缺点</h2><p><strong> 优点：</strong><br>1.封装性好，创建和使用分离<br>2.扩展性好，建造类之间独立，一定程度上实现了解耦</p><p><strong> 缺点：</strong><br>1.产生多余的Builder对象<br>2.产品内部发生变化时，建造者都需要修改，成本较大</p><h2 id="建造者模式使用案例"><a href="#建造者模式使用案例" class="headerlink" title="建造者模式使用案例"></a>建造者模式使用案例</h2><h3 id="1-Spring框架中使用建造者模式"><a href="#1-Spring框架中使用建造者模式" class="headerlink" title="1.Spring框架中使用建造者模式"></a>1.Spring框架中使用建造者模式</h3><p>Spring中的UriComponents和UriComponentsBuilder</p><p>UriComponents基本方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UriComponents</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ENCODING = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="comment">// 用于分割uri的正则表达式，下面会说到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern NAMES_PATTERN = Pattern.compile(<span class="string">"\\&#123;([^/]+?)\\&#125;"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String scheme;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fragment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">UriComponents</span><span class="params">(String scheme, String fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scheme = scheme;</span><br><span class="line">        <span class="keyword">this</span>.fragment = fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个Components对应的getter方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的scheme.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getScheme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.scheme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的fragment.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的schemeSpecificPar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getSchemeSpecificPart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回userInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getUserInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的host</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getHost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getPath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的path部分的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;String&gt; <span class="title">getPathSegments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的query部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的query参数map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MultiValueMap&lt;String, String&gt; <span class="title">getQueryParams</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL的components用特定的编码规则编码并返回，默认为utf-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">encode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> encode(DEFAULT_ENCODING);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (UnsupportedEncodingException ex) &#123;</span><br><span class="line">            <span class="comment">// should not occur</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码的抽象方法，传入相应的编码规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> UriComponents <span class="title">encode</span><span class="params">(String encoding)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">expand</span><span class="params">(Map&lt;String, ?&gt; uriVariables)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(uriVariables, <span class="string">"'uriVariables' must not be null"</span>);</span><br><span class="line">        <span class="keyword">return</span> expandInternal(<span class="keyword">new</span> MapTemplateVariables(uriVariables));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值，输入为数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">expand</span><span class="params">(Object... uriVariableValues)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(uriVariableValues, <span class="string">"'uriVariableValues' must not be null"</span>);</span><br><span class="line">        <span class="keyword">return</span> expandInternal(<span class="keyword">new</span> VarArgsTemplateVariables(uriVariableValues));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值，输入为UriTemplateVariables</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> UriComponents <span class="title">expand</span><span class="params">(UriTemplateVariables uriVariables)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(uriVariables, <span class="string">"'uriVariables' must not be null"</span>);</span><br><span class="line">        <span class="keyword">return</span> expandInternal(uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URL中的模板参数换成对应的值的最终的实现方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> UriComponents <span class="title">expandInternal</span><span class="params">(UriTemplateVariables uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> UriComponents <span class="title">normalize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URL的string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toUriString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回URI格式的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> URI <span class="title">toUri</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toUriString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将这些Components的值赋给其builder类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">copyToUriComponentsBuilder</span><span class="params">(UriComponentsBuilder builder)</span></span>;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UriComponentsBuilder类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认构造方法，其中path的构造类为CompositePathComponentBuilder，它为UriComponentsBuilder的内部静态类，主要实现对url的path部分进行构造。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">UriComponentsBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.pathBuilder = <span class="keyword">new</span> CompositePathComponentBuilder();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建一个传入UriComponentsBuilder类的深拷贝对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">UriComponentsBuilder</span><span class="params">(UriComponentsBuilder other)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.scheme = other.scheme;</span><br><span class="line">       <span class="keyword">this</span>.ssp = other.ssp;</span><br><span class="line">       <span class="keyword">this</span>.userInfo = other.userInfo;</span><br><span class="line">       <span class="keyword">this</span>.host = other.host;</span><br><span class="line">       <span class="keyword">this</span>.port = other.port;</span><br><span class="line">       <span class="keyword">this</span>.pathBuilder = other.pathBuilder.cloneBuilder();</span><br><span class="line">       <span class="keyword">this</span>.queryParams.putAll(other.queryParams);</span><br><span class="line">       <span class="keyword">this</span>.fragment = other.fragment;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-JDK中使用建造者模式"><a href="#2-JDK中使用建造者模式" class="headerlink" title="2.JDK中使用建造者模式"></a>2.JDK中使用建造者模式</h3><p>JDK中的StringBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">long</span> lng)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(lng);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(f);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(d);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/devcheng_net_jzzms_002.png" alt="“伊成博客”"></p><p>由上图我们可以看出StringBuilder继承了AbstractStringBuilder，而AbstractStringBuilder实现了appendable。</p><p>StringBuilder：指挥者类，持有具体建造者的引用，由于StringBuilder继承了AbstractStringBuilder，这里StringBuilder通过super来作为具体建造者的引用。<br>AbstractStringBuilder：具体建造者，它实现了appendable接口的append(Character c)方法。<br>appendable：抽象建造者，定义了创建对象的接口。<br>StringBuilder的append(Character c)方法：</p><p>tips：<br>基本上看到源码中以 Builder 结尾的类，大多数都属于 建造者模式~</p><hr><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建造者模式介绍&quot;&gt;&lt;a href=&quot;#建造者模式介绍&quot; class=&quot;headerlink&quot; title=&quot;建造者模式介绍&quot;&gt;&lt;/a&gt;建造者模式介绍&lt;/h2&gt;&lt;p&gt;建造者模式，顾名思义的就是类似建房子，有一个固定的流程。在大话设计模式中，有一个例子大概意思是同一道
      
    
    </summary>
    
      <category term="blogshare" scheme="http://www.devcheng.net/categories/blogshare/"/>
    
    
      <category term="java设计模式" scheme="http://www.devcheng.net/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="建造者模式" scheme="http://www.devcheng.net/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
